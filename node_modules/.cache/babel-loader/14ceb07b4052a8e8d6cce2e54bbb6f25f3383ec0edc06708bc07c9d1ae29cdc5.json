{"ast":null,"code":"import { PDFDocument, rgb } from 'pdf-lib';\n\n// Standard Magic card dimensions (2.5\" x 3.5\")\nconst CARD_WIDTH = 2.5 * 72; // Convert inches to points (72 points per inch)\nconst CARD_HEIGHT = 3.5 * 72;\n\n// Page dimensions (A4)\nconst PAGE_WIDTH = 8.5 * 72; // 8.5 inches\nconst PAGE_HEIGHT = 11 * 72; // 11 inches\n\n// Margins (minimal)\nconst MARGIN_X = 0.25 * 72; // 0.25 inches\nconst MARGIN_Y = 0.25 * 72;\n\n// Calculate grid spacing\nconst GRID_WIDTH = PAGE_WIDTH - 2 * MARGIN_X;\nconst GRID_HEIGHT = PAGE_HEIGHT - 2 * MARGIN_Y;\nconst CARD_SPACING_X = (GRID_WIDTH - 3 * CARD_WIDTH) / 2;\nconst CARD_SPACING_Y = (GRID_HEIGHT - 3 * CARD_HEIGHT) / 2;\n\n// Convert image URL to base64 to avoid CORS issues\nconst convertImageToBase64 = async imageUrl => {\n  try {\n    // Create a canvas to convert the image\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n    const img = new Image();\n\n    // Set crossOrigin to anonymous to handle CORS\n    img.crossOrigin = 'anonymous';\n    return new Promise((resolve, reject) => {\n      img.onload = () => {\n        canvas.width = img.width;\n        canvas.height = img.height;\n        ctx.drawImage(img, 0, 0);\n        try {\n          const dataURL = canvas.toDataURL('image/png');\n          resolve(dataURL);\n        } catch (error) {\n          console.error('Error converting image to base64:', error);\n          reject(error);\n        }\n      };\n      img.onerror = () => {\n        console.error('Error loading image:', imageUrl);\n        reject(new Error('Failed to load image'));\n      };\n      img.src = imageUrl;\n    });\n  } catch (error) {\n    console.error('Error in convertImageToBase64:', error);\n    throw error;\n  }\n};\n\n// Convert base64 data URL to ArrayBuffer\nconst base64ToArrayBuffer = base64 => {\n  const binaryString = atob(base64.split(',')[1]);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes.buffer;\n};\nexport const generatePDF = async cards => {\n  const pdfDoc = await PDFDocument.create();\n\n  // Process cards in groups of 9 (3x3 grid per page)\n  for (let i = 0; i < cards.length; i += 9) {\n    const pageCards = cards.slice(i, i + 9);\n    const page = pdfDoc.addPage([PAGE_WIDTH, PAGE_HEIGHT]);\n\n    // Add cards to the page\n    for (let j = 0; j < pageCards.length; j++) {\n      const card = pageCards[j];\n      const row = Math.floor(j / 3);\n      const col = j % 3;\n      const x = MARGIN_X + col * (CARD_WIDTH + CARD_SPACING_X);\n      const y = PAGE_HEIGHT - MARGIN_Y - CARD_HEIGHT - row * (CARD_HEIGHT + CARD_SPACING_Y);\n      try {\n        // Convert image to base64 first to avoid CORS issues\n        const base64Data = await convertImageToBase64(card.imageUrl);\n        const imageBytes = base64ToArrayBuffer(base64Data);\n\n        // Embed the image\n        const image = await pdfDoc.embedPng(imageBytes);\n\n        // Draw the image at the calculated position\n        page.drawImage(image, {\n          x,\n          y,\n          width: CARD_WIDTH,\n          height: CARD_HEIGHT\n        });\n      } catch (error) {\n        console.error(`Error embedding image for ${card.name}:`, error);\n        // Draw a placeholder rectangle if image fails to load\n        page.drawRectangle({\n          x,\n          y,\n          width: CARD_WIDTH,\n          height: CARD_HEIGHT,\n          borderColor: rgb(0.8, 0.8, 0.8),\n          borderWidth: 1,\n          color: rgb(0.95, 0.95, 0.95)\n        });\n\n        // Add text placeholder\n        page.drawText(card.name, {\n          x: x + 5,\n          y: y + CARD_HEIGHT / 2,\n          size: 10,\n          color: rgb(0.5, 0.5, 0.5)\n        });\n      }\n    }\n  }\n\n  // Save the PDF\n  const pdfBytes = await pdfDoc.save();\n  return pdfBytes;\n};\nexport const downloadPDF = (pdfBytes, filename = 'mtg-deck.pdf') => {\n  const blob = new Blob([pdfBytes], {\n    type: 'application/pdf'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["PDFDocument","rgb","CARD_WIDTH","CARD_HEIGHT","PAGE_WIDTH","PAGE_HEIGHT","MARGIN_X","MARGIN_Y","GRID_WIDTH","GRID_HEIGHT","CARD_SPACING_X","CARD_SPACING_Y","convertImageToBase64","imageUrl","canvas","document","createElement","ctx","getContext","img","Image","crossOrigin","Promise","resolve","reject","onload","width","height","drawImage","dataURL","toDataURL","error","console","onerror","Error","src","base64ToArrayBuffer","base64","binaryString","atob","split","bytes","Uint8Array","length","i","charCodeAt","buffer","generatePDF","cards","pdfDoc","create","pageCards","slice","page","addPage","j","card","row","Math","floor","col","x","y","base64Data","imageBytes","image","embedPng","name","drawRectangle","borderColor","borderWidth","color","drawText","size","pdfBytes","save","downloadPDF","filename","blob","Blob","type","url","URL","createObjectURL","link","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/utils/pdfGenerator.js"],"sourcesContent":["import { PDFDocument, rgb } from 'pdf-lib';\r\n\r\n// Standard Magic card dimensions (2.5\" x 3.5\")\r\nconst CARD_WIDTH = 2.5 * 72; // Convert inches to points (72 points per inch)\r\nconst CARD_HEIGHT = 3.5 * 72;\r\n\r\n// Page dimensions (A4)\r\nconst PAGE_WIDTH = 8.5 * 72; // 8.5 inches\r\nconst PAGE_HEIGHT = 11 * 72; // 11 inches\r\n\r\n// Margins (minimal)\r\nconst MARGIN_X = 0.25 * 72; // 0.25 inches\r\nconst MARGIN_Y = 0.25 * 72;\r\n\r\n// Calculate grid spacing\r\nconst GRID_WIDTH = PAGE_WIDTH - (2 * MARGIN_X);\r\nconst GRID_HEIGHT = PAGE_HEIGHT - (2 * MARGIN_Y);\r\nconst CARD_SPACING_X = (GRID_WIDTH - (3 * CARD_WIDTH)) / 2;\r\nconst CARD_SPACING_Y = (GRID_HEIGHT - (3 * CARD_HEIGHT)) / 2;\r\n\r\n// Convert image URL to base64 to avoid CORS issues\r\nconst convertImageToBase64 = async (imageUrl) => {\r\n  try {\r\n    // Create a canvas to convert the image\r\n    const canvas = document.createElement('canvas');\r\n    const ctx = canvas.getContext('2d');\r\n    const img = new Image();\r\n    \r\n    // Set crossOrigin to anonymous to handle CORS\r\n    img.crossOrigin = 'anonymous';\r\n    \r\n    return new Promise((resolve, reject) => {\r\n      img.onload = () => {\r\n        canvas.width = img.width;\r\n        canvas.height = img.height;\r\n        ctx.drawImage(img, 0, 0);\r\n        \r\n        try {\r\n          const dataURL = canvas.toDataURL('image/png');\r\n          resolve(dataURL);\r\n        } catch (error) {\r\n          console.error('Error converting image to base64:', error);\r\n          reject(error);\r\n        }\r\n      };\r\n      \r\n      img.onerror = () => {\r\n        console.error('Error loading image:', imageUrl);\r\n        reject(new Error('Failed to load image'));\r\n      };\r\n      \r\n      img.src = imageUrl;\r\n    });\r\n  } catch (error) {\r\n    console.error('Error in convertImageToBase64:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Convert base64 data URL to ArrayBuffer\r\nconst base64ToArrayBuffer = (base64) => {\r\n  const binaryString = atob(base64.split(',')[1]);\r\n  const bytes = new Uint8Array(binaryString.length);\r\n  for (let i = 0; i < binaryString.length; i++) {\r\n    bytes[i] = binaryString.charCodeAt(i);\r\n  }\r\n  return bytes.buffer;\r\n};\r\n\r\nexport const generatePDF = async (cards) => {\r\n  const pdfDoc = await PDFDocument.create();\r\n  \r\n  // Process cards in groups of 9 (3x3 grid per page)\r\n  for (let i = 0; i < cards.length; i += 9) {\r\n    const pageCards = cards.slice(i, i + 9);\r\n    const page = pdfDoc.addPage([PAGE_WIDTH, PAGE_HEIGHT]);\r\n    \r\n    // Add cards to the page\r\n    for (let j = 0; j < pageCards.length; j++) {\r\n      const card = pageCards[j];\r\n      const row = Math.floor(j / 3);\r\n      const col = j % 3;\r\n      \r\n      const x = MARGIN_X + (col * (CARD_WIDTH + CARD_SPACING_X));\r\n      const y = PAGE_HEIGHT - MARGIN_Y - CARD_HEIGHT - (row * (CARD_HEIGHT + CARD_SPACING_Y));\r\n      \r\n      try {\r\n        // Convert image to base64 first to avoid CORS issues\r\n        const base64Data = await convertImageToBase64(card.imageUrl);\r\n        const imageBytes = base64ToArrayBuffer(base64Data);\r\n        \r\n        // Embed the image\r\n        const image = await pdfDoc.embedPng(imageBytes);\r\n        \r\n        // Draw the image at the calculated position\r\n        page.drawImage(image, {\r\n          x,\r\n          y,\r\n          width: CARD_WIDTH,\r\n          height: CARD_HEIGHT,\r\n        });\r\n      } catch (error) {\r\n        console.error(`Error embedding image for ${card.name}:`, error);\r\n        // Draw a placeholder rectangle if image fails to load\r\n        page.drawRectangle({\r\n          x,\r\n          y,\r\n          width: CARD_WIDTH,\r\n          height: CARD_HEIGHT,\r\n          borderColor: rgb(0.8, 0.8, 0.8),\r\n          borderWidth: 1,\r\n          color: rgb(0.95, 0.95, 0.95),\r\n        });\r\n        \r\n        // Add text placeholder\r\n        page.drawText(card.name, {\r\n          x: x + 5,\r\n          y: y + CARD_HEIGHT / 2,\r\n          size: 10,\r\n          color: rgb(0.5, 0.5, 0.5),\r\n        });\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Save the PDF\r\n  const pdfBytes = await pdfDoc.save();\r\n  return pdfBytes;\r\n};\r\n\r\nexport const downloadPDF = (pdfBytes, filename = 'mtg-deck.pdf') => {\r\n  const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  \r\n  URL.revokeObjectURL(url);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}