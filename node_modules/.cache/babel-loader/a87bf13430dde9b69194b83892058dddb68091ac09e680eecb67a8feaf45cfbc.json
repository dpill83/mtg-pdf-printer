{"ast":null,"code":"import { PDFDocument } from 'pdf-lib';\n\n// Standard Magic card dimensions (2.5\" x 3.5\")\nconst CARD_WIDTH = 2.5 * 72; // 180pt\nconst CARD_HEIGHT = 3.5 * 72; // 252pt\n\n// US Letter dimensions (8.5\" x 11\")\nconst PAGE_WIDTH = 8.5 * 72; // 612pt\nconst PAGE_HEIGHT = 11 * 72; // 792pt\n\n// Margins (minimal for cutting)\nconst MARGIN_X = 0.25 * 72; // 18pt\nconst MARGIN_Y = 0.25 * 72; // 18pt\n\n// Calculate grid spacing\nconst GRID_WIDTH = PAGE_WIDTH - 2 * MARGIN_X;\nconst GRID_HEIGHT = PAGE_HEIGHT - 2 * MARGIN_Y;\nconst CARD_SPACING_X = (GRID_WIDTH - 3 * CARD_WIDTH) / 2;\nconst CARD_SPACING_Y = (GRID_HEIGHT - 3 * CARD_HEIGHT) / 2;\nexport const generatePDF = async cards => {\n  const pdfDoc = await PDFDocument.create();\n\n  // Pre-fetch all images as Uint8Array\n  const imageBytesArr = await Promise.all(cards.map(async card => {\n    const response = await fetch(card.imageUrl);\n    const arrayBuffer = await response.arrayBuffer();\n    return new Uint8Array(arrayBuffer);\n  }));\n  for (let i = 0; i < cards.length; i += 9) {\n    const pageCards = cards.slice(i, i + 9);\n    const pageImages = imageBytesArr.slice(i, i + 9);\n    const page = pdfDoc.addPage([PAGE_WIDTH, PAGE_HEIGHT]);\n    for (let j = 0; j < pageCards.length; j++) {\n      const imgBytes = pageImages[j];\n      // Embed image (assume PNG)\n      const img = await pdfDoc.embedPng(imgBytes);\n      const row = Math.floor(j / 3);\n      const col = j % 3;\n      const x = MARGIN_X + col * (CARD_WIDTH + CARD_SPACING_X);\n      const y = PAGE_HEIGHT - MARGIN_Y - CARD_HEIGHT - row * (CARD_HEIGHT + CARD_SPACING_Y);\n      page.drawImage(img, {\n        x,\n        y,\n        width: CARD_WIDTH,\n        height: CARD_HEIGHT\n      });\n    }\n  }\n  const pdfBytes = await pdfDoc.save();\n  // Return as Blob for download\n  return new Blob([pdfBytes], {\n    type: 'application/pdf'\n  });\n};\nexport const downloadPDF = (pdfBlob, filename = 'mtg-deck.pdf') => {\n  const url = URL.createObjectURL(pdfBlob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["PDFDocument","CARD_WIDTH","CARD_HEIGHT","PAGE_WIDTH","PAGE_HEIGHT","MARGIN_X","MARGIN_Y","GRID_WIDTH","GRID_HEIGHT","CARD_SPACING_X","CARD_SPACING_Y","generatePDF","cards","pdfDoc","create","imageBytesArr","Promise","all","map","card","response","fetch","imageUrl","arrayBuffer","Uint8Array","i","length","pageCards","slice","pageImages","page","addPage","j","imgBytes","img","embedPng","row","Math","floor","col","x","y","drawImage","width","height","pdfBytes","save","Blob","type","downloadPDF","pdfBlob","filename","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/utils/pdfGenerator.js"],"sourcesContent":["import { PDFDocument } from 'pdf-lib';\r\n\r\n// Standard Magic card dimensions (2.5\" x 3.5\")\r\nconst CARD_WIDTH = 2.5 * 72; // 180pt\r\nconst CARD_HEIGHT = 3.5 * 72; // 252pt\r\n\r\n// US Letter dimensions (8.5\" x 11\")\r\nconst PAGE_WIDTH = 8.5 * 72; // 612pt\r\nconst PAGE_HEIGHT = 11 * 72; // 792pt\r\n\r\n// Margins (minimal for cutting)\r\nconst MARGIN_X = 0.25 * 72; // 18pt\r\nconst MARGIN_Y = 0.25 * 72; // 18pt\r\n\r\n// Calculate grid spacing\r\nconst GRID_WIDTH = PAGE_WIDTH - (2 * MARGIN_X);\r\nconst GRID_HEIGHT = PAGE_HEIGHT - (2 * MARGIN_Y);\r\nconst CARD_SPACING_X = (GRID_WIDTH - (3 * CARD_WIDTH)) / 2;\r\nconst CARD_SPACING_Y = (GRID_HEIGHT - (3 * CARD_HEIGHT)) / 2;\r\n\r\nexport const generatePDF = async (cards) => {\r\n  const pdfDoc = await PDFDocument.create();\r\n\r\n  // Pre-fetch all images as Uint8Array\r\n  const imageBytesArr = await Promise.all(\r\n    cards.map(async (card) => {\r\n      const response = await fetch(card.imageUrl);\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      return new Uint8Array(arrayBuffer);\r\n    })\r\n  );\r\n\r\n  for (let i = 0; i < cards.length; i += 9) {\r\n    const pageCards = cards.slice(i, i + 9);\r\n    const pageImages = imageBytesArr.slice(i, i + 9);\r\n    const page = pdfDoc.addPage([PAGE_WIDTH, PAGE_HEIGHT]);\r\n\r\n    for (let j = 0; j < pageCards.length; j++) {\r\n      const imgBytes = pageImages[j];\r\n      // Embed image (assume PNG)\r\n      const img = await pdfDoc.embedPng(imgBytes);\r\n      const row = Math.floor(j / 3);\r\n      const col = j % 3;\r\n      const x = MARGIN_X + (col * (CARD_WIDTH + CARD_SPACING_X));\r\n      const y = PAGE_HEIGHT - MARGIN_Y - CARD_HEIGHT - (row * (CARD_HEIGHT + CARD_SPACING_Y));\r\n      page.drawImage(img, {\r\n        x,\r\n        y,\r\n        width: CARD_WIDTH,\r\n        height: CARD_HEIGHT,\r\n      });\r\n    }\r\n  }\r\n\r\n  const pdfBytes = await pdfDoc.save();\r\n  // Return as Blob for download\r\n  return new Blob([pdfBytes], { type: 'application/pdf' });\r\n};\r\n\r\nexport const downloadPDF = (pdfBlob, filename = 'mtg-deck.pdf') => {\r\n  const url = URL.createObjectURL(pdfBlob);\r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  URL.revokeObjectURL(url);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}