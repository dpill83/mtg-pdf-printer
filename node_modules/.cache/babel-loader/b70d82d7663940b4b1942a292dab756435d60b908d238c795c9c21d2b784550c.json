{"ast":null,"code":"import { PDFDocument, rgb } from 'pdf-lib';\n\n// Standard Magic card dimensions (2.5\" x 3.5\")\nconst CARD_WIDTH = 2.5 * 72; // Convert inches to points (72 points per inch)\nconst CARD_HEIGHT = 3.5 * 72;\n\n// Page dimensions (A4)\nconst PAGE_WIDTH = 8.5 * 72; // 8.5 inches\nconst PAGE_HEIGHT = 11 * 72; // 11 inches\n\n// Margins (minimal)\nconst MARGIN_X = 0.25 * 72; // 0.25 inches\nconst MARGIN_Y = 0.25 * 72;\n\n// Calculate grid spacing\nconst GRID_WIDTH = PAGE_WIDTH - 2 * MARGIN_X;\nconst GRID_HEIGHT = PAGE_HEIGHT - 2 * MARGIN_Y;\nconst CARD_SPACING_X = (GRID_WIDTH - 3 * CARD_WIDTH) / 2;\nconst CARD_SPACING_Y = (GRID_HEIGHT - 3 * CARD_HEIGHT) / 2;\nexport const generatePDF = async cards => {\n  const pdfDoc = await PDFDocument.create();\n\n  // Process cards in groups of 9 (3x3 grid per page)\n  for (let i = 0; i < cards.length; i += 9) {\n    const pageCards = cards.slice(i, i + 9);\n    const page = pdfDoc.addPage([PAGE_WIDTH, PAGE_HEIGHT]);\n\n    // Add cards to the page\n    for (let j = 0; j < pageCards.length; j++) {\n      const card = pageCards[j];\n      const row = Math.floor(j / 3);\n      const col = j % 3;\n      const x = MARGIN_X + col * (CARD_WIDTH + CARD_SPACING_X);\n      const y = PAGE_HEIGHT - MARGIN_Y - CARD_HEIGHT - row * (CARD_HEIGHT + CARD_SPACING_Y);\n\n      // Draw card border\n      page.drawRectangle({\n        x,\n        y,\n        width: CARD_WIDTH,\n        height: CARD_HEIGHT,\n        borderColor: rgb(0.2, 0.2, 0.2),\n        borderWidth: 2,\n        color: rgb(0.98, 0.98, 0.98)\n      });\n\n      // Draw card name\n      page.drawText(card.name, {\n        x: x + 10,\n        y: y + CARD_HEIGHT - 30,\n        size: 12,\n        color: rgb(0.1, 0.1, 0.1),\n        maxWidth: CARD_WIDTH - 20\n      });\n\n      // Draw set information\n      page.drawText(`${card.set} #${card.collectorNumber}`, {\n        x: x + 10,\n        y: y + 20,\n        size: 8,\n        color: rgb(0.4, 0.4, 0.4),\n        maxWidth: CARD_WIDTH - 20\n      });\n\n      // Draw card type indicator (simplified)\n      const cardType = card.name.includes('Land') ? 'Land' : 'Spell';\n      page.drawText(cardType, {\n        x: x + 10,\n        y: y + CARD_HEIGHT / 2,\n        size: 10,\n        color: rgb(0.3, 0.3, 0.3),\n        maxWidth: CARD_WIDTH - 20\n      });\n    }\n  }\n\n  // Save the PDF\n  const pdfBytes = await pdfDoc.save();\n  return pdfBytes;\n};\nexport const downloadPDF = (pdfBytes, filename = 'mtg-deck.pdf') => {\n  const blob = new Blob([pdfBytes], {\n    type: 'application/pdf'\n  });\n  const url = URL.createObjectURL(blob);\n  const link = document.createElement('a');\n  link.href = url;\n  link.download = filename;\n  document.body.appendChild(link);\n  link.click();\n  document.body.removeChild(link);\n  URL.revokeObjectURL(url);\n};","map":{"version":3,"names":["PDFDocument","rgb","CARD_WIDTH","CARD_HEIGHT","PAGE_WIDTH","PAGE_HEIGHT","MARGIN_X","MARGIN_Y","GRID_WIDTH","GRID_HEIGHT","CARD_SPACING_X","CARD_SPACING_Y","generatePDF","cards","pdfDoc","create","i","length","pageCards","slice","page","addPage","j","card","row","Math","floor","col","x","y","drawRectangle","width","height","borderColor","borderWidth","color","drawText","name","size","maxWidth","set","collectorNumber","cardType","includes","pdfBytes","save","downloadPDF","filename","blob","Blob","type","url","URL","createObjectURL","link","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/utils/pdfGenerator.js"],"sourcesContent":["import { PDFDocument, rgb } from 'pdf-lib';\r\n\r\n// Standard Magic card dimensions (2.5\" x 3.5\")\r\nconst CARD_WIDTH = 2.5 * 72; // Convert inches to points (72 points per inch)\r\nconst CARD_HEIGHT = 3.5 * 72;\r\n\r\n// Page dimensions (A4)\r\nconst PAGE_WIDTH = 8.5 * 72; // 8.5 inches\r\nconst PAGE_HEIGHT = 11 * 72; // 11 inches\r\n\r\n// Margins (minimal)\r\nconst MARGIN_X = 0.25 * 72; // 0.25 inches\r\nconst MARGIN_Y = 0.25 * 72;\r\n\r\n// Calculate grid spacing\r\nconst GRID_WIDTH = PAGE_WIDTH - (2 * MARGIN_X);\r\nconst GRID_HEIGHT = PAGE_HEIGHT - (2 * MARGIN_Y);\r\nconst CARD_SPACING_X = (GRID_WIDTH - (3 * CARD_WIDTH)) / 2;\r\nconst CARD_SPACING_Y = (GRID_HEIGHT - (3 * CARD_HEIGHT)) / 2;\r\n\r\nexport const generatePDF = async (cards) => {\r\n  const pdfDoc = await PDFDocument.create();\r\n  \r\n  // Process cards in groups of 9 (3x3 grid per page)\r\n  for (let i = 0; i < cards.length; i += 9) {\r\n    const pageCards = cards.slice(i, i + 9);\r\n    const page = pdfDoc.addPage([PAGE_WIDTH, PAGE_HEIGHT]);\r\n    \r\n    // Add cards to the page\r\n    for (let j = 0; j < pageCards.length; j++) {\r\n      const card = pageCards[j];\r\n      const row = Math.floor(j / 3);\r\n      const col = j % 3;\r\n      \r\n      const x = MARGIN_X + (col * (CARD_WIDTH + CARD_SPACING_X));\r\n      const y = PAGE_HEIGHT - MARGIN_Y - CARD_HEIGHT - (row * (CARD_HEIGHT + CARD_SPACING_Y));\r\n      \r\n      // Draw card border\r\n      page.drawRectangle({\r\n        x,\r\n        y,\r\n        width: CARD_WIDTH,\r\n        height: CARD_HEIGHT,\r\n        borderColor: rgb(0.2, 0.2, 0.2),\r\n        borderWidth: 2,\r\n        color: rgb(0.98, 0.98, 0.98),\r\n      });\r\n      \r\n      // Draw card name\r\n      page.drawText(card.name, {\r\n        x: x + 10,\r\n        y: y + CARD_HEIGHT - 30,\r\n        size: 12,\r\n        color: rgb(0.1, 0.1, 0.1),\r\n        maxWidth: CARD_WIDTH - 20,\r\n      });\r\n      \r\n      // Draw set information\r\n      page.drawText(`${card.set} #${card.collectorNumber}`, {\r\n        x: x + 10,\r\n        y: y + 20,\r\n        size: 8,\r\n        color: rgb(0.4, 0.4, 0.4),\r\n        maxWidth: CARD_WIDTH - 20,\r\n      });\r\n      \r\n      // Draw card type indicator (simplified)\r\n      const cardType = card.name.includes('Land') ? 'Land' : 'Spell';\r\n      page.drawText(cardType, {\r\n        x: x + 10,\r\n        y: y + CARD_HEIGHT / 2,\r\n        size: 10,\r\n        color: rgb(0.3, 0.3, 0.3),\r\n        maxWidth: CARD_WIDTH - 20,\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Save the PDF\r\n  const pdfBytes = await pdfDoc.save();\r\n  return pdfBytes;\r\n};\r\n\r\nexport const downloadPDF = (pdfBytes, filename = 'mtg-deck.pdf') => {\r\n  const blob = new Blob([pdfBytes], { type: 'application/pdf' });\r\n  const url = URL.createObjectURL(blob);\r\n  \r\n  const link = document.createElement('a');\r\n  link.href = url;\r\n  link.download = filename;\r\n  document.body.appendChild(link);\r\n  link.click();\r\n  document.body.removeChild(link);\r\n  \r\n  URL.revokeObjectURL(url);\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}