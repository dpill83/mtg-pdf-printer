{"ast":null,"code":"import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = decklistText => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+\\d+)?$/);\n    if (match) {\n      const [, quantity, cardName, setCode] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null\n      });\n    }\n  }\n  return cards;\n};\n\n// Convert image URL to base64 using a CORS proxy\nconst convertImageToBase64 = async imageUrl => {\n  try {\n    // Use a CORS proxy to fetch the image\n    const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(imageUrl)}`;\n    const response = await fetch(proxyUrl);\n    if (!response.ok) {\n      throw new Error(`HTTP error! status: ${response.status}`);\n    }\n    const blob = await response.blob();\n\n    // Convert blob to base64\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = () => resolve(reader.result);\n      reader.onerror = () => reject(new Error('Failed to convert blob to base64'));\n      reader.readAsDataURL(blob);\n    });\n  } catch (error) {\n    console.error('Error converting image to base64:', error);\n    throw error;\n  }\n};\n\n// Test function to verify API is working\nexport const testScryfallAPI = async () => {\n  try {\n    console.log('Testing Scryfall API...');\n\n    // Test 1: Simple card search\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\n\n    // Test 2: Set-specific search\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\" set:M11',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\n\n    // Test 3: Counterspell search\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Counterspell\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\n    return true;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('API test failed:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText);\n    return false;\n  }\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null) => {\n  try {\n    // Always try name-only search first (most reliable)\n    console.log(`Searching for: !\"${cardName}\"`);\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: `!\"${cardName}\"`,\n        unique: 'cards'\n      }\n    });\n    if (response.data.data && response.data.data.length > 0) {\n      var _card$image_uris, _card$card_faces, _card$card_faces$, _card$card_faces$$ima;\n      const card = response.data.data[0];\n      const imageUrl = ((_card$image_uris = card.image_uris) === null || _card$image_uris === void 0 ? void 0 : _card$image_uris.png) || ((_card$card_faces = card.card_faces) === null || _card$card_faces === void 0 ? void 0 : (_card$card_faces$ = _card$card_faces[0]) === null || _card$card_faces$ === void 0 ? void 0 : (_card$card_faces$$ima = _card$card_faces$.image_uris) === null || _card$card_faces$$ima === void 0 ? void 0 : _card$card_faces$$ima.png);\n      console.log(`Found ${cardName} in set ${card.set_name}`);\n\n      // Pre-load and convert image to base64 using CORS proxy\n      let base64Image = null;\n      try {\n        base64Image = await convertImageToBase64(imageUrl);\n        console.log(`Successfully converted ${cardName} image to base64`);\n      } catch (imageError) {\n        console.warn(`Failed to convert ${cardName} image to base64:`, imageError);\n        // Keep the original URL as fallback\n      }\n      return {\n        name: card.name,\n        imageUrl: imageUrl,\n        base64Image: base64Image,\n        // Store base64 version for PDF generation\n        set: card.set_name,\n        collectorNumber: card.collector_number\n      };\n    }\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error(`Error fetching card ${cardName}:`, (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status, (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.statusText);\n    throw new Error(`Card not found: ${cardName}`);\n  }\n};\n\n// Fetch multiple cards with error handling\nexport const fetchMultipleCards = async cards => {\n  const results = [];\n  const errors = [];\n  for (const card of cards) {\n    try {\n      const cardData = await fetchCardData(card.name, card.setCode);\n      // Add the card multiple times based on quantity\n      for (let i = 0; i < card.quantity; i++) {\n        results.push(cardData);\n      }\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n    }\n  }\n  return {\n    results,\n    errors\n  };\n};","map":{"version":3,"names":["axios","parseDecklist","decklistText","lines","trim","split","cards","line","trimmedLine","match","quantity","cardName","setCode","push","parseInt","name","convertImageToBase64","imageUrl","proxyUrl","encodeURIComponent","response","fetch","ok","Error","status","blob","Promise","resolve","reject","reader","FileReader","onload","result","onerror","readAsDataURL","error","console","testScryfallAPI","log","response1","get","params","q","unique","data","length","response2","response3","_error$response","_error$response2","statusText","fetchCardData","_card$image_uris","_card$card_faces","_card$card_faces$","_card$card_faces$$ima","card","image_uris","png","card_faces","set_name","base64Image","imageError","warn","set","collectorNumber","collector_number","_error$response3","_error$response4","fetchMultipleCards","results","errors","cardData","i","message"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/utils/scryfall.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Parse decklist text into card objects\r\nexport const parseDecklist = (decklistText) => {\r\n  const lines = decklistText.trim().split('\\n');\r\n  const cards = [];\r\n\r\n  for (const line of lines) {\r\n    const trimmedLine = line.trim();\r\n    if (!trimmedLine) continue;\r\n\r\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\r\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+\\d+)?$/);\r\n    \r\n    if (match) {\r\n      const [, quantity, cardName, setCode] = match;\r\n      cards.push({\r\n        quantity: parseInt(quantity),\r\n        name: cardName.trim(),\r\n        setCode: setCode ? setCode.trim() : null\r\n      });\r\n    }\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\n// Convert image URL to base64 using a CORS proxy\r\nconst convertImageToBase64 = async (imageUrl) => {\r\n  try {\r\n    // Use a CORS proxy to fetch the image\r\n    const proxyUrl = `https://api.allorigins.win/raw?url=${encodeURIComponent(imageUrl)}`;\r\n    \r\n    const response = await fetch(proxyUrl);\r\n    if (!response.ok) {\r\n      throw new Error(`HTTP error! status: ${response.status}`);\r\n    }\r\n    \r\n    const blob = await response.blob();\r\n    \r\n    // Convert blob to base64\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = () => resolve(reader.result);\r\n      reader.onerror = () => reject(new Error('Failed to convert blob to base64'));\r\n      reader.readAsDataURL(blob);\r\n    });\r\n  } catch (error) {\r\n    console.error('Error converting image to base64:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Test function to verify API is working\r\nexport const testScryfallAPI = async () => {\r\n  try {\r\n    console.log('Testing Scryfall API...');\r\n    \r\n    // Test 1: Simple card search\r\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\r\n      params: { q: '!\"Lightning Bolt\"', unique: 'cards' }\r\n    });\r\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\r\n    \r\n    // Test 2: Set-specific search\r\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\r\n      params: { q: '!\"Lightning Bolt\" set:M11', unique: 'cards' }\r\n    });\r\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\r\n    \r\n    // Test 3: Counterspell search\r\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\r\n      params: { q: '!\"Counterspell\"', unique: 'cards' }\r\n    });\r\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('API test failed:', error.response?.status, error.response?.statusText);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Fetch card data from Scryfall API\r\nexport const fetchCardData = async (cardName, setCode = null) => {\r\n  try {\r\n    // Always try name-only search first (most reliable)\r\n    console.log(`Searching for: !\"${cardName}\"`);\r\n    \r\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\r\n      params: {\r\n        q: `!\"${cardName}\"`,\r\n        unique: 'cards'\r\n      }\r\n    });\r\n\r\n    if (response.data.data && response.data.data.length > 0) {\r\n      const card = response.data.data[0];\r\n      const imageUrl = card.image_uris?.png || card.card_faces?.[0]?.image_uris?.png;\r\n      \r\n      console.log(`Found ${cardName} in set ${card.set_name}`);\r\n      \r\n      // Pre-load and convert image to base64 using CORS proxy\r\n      let base64Image = null;\r\n      try {\r\n        base64Image = await convertImageToBase64(imageUrl);\r\n        console.log(`Successfully converted ${cardName} image to base64`);\r\n      } catch (imageError) {\r\n        console.warn(`Failed to convert ${cardName} image to base64:`, imageError);\r\n        // Keep the original URL as fallback\r\n      }\r\n      \r\n      return {\r\n        name: card.name,\r\n        imageUrl: imageUrl,\r\n        base64Image: base64Image, // Store base64 version for PDF generation\r\n        set: card.set_name,\r\n        collectorNumber: card.collector_number\r\n      };\r\n    }\r\n    \r\n    throw new Error(`Card not found: ${cardName}`);\r\n  } catch (error) {\r\n    console.error(`Error fetching card ${cardName}:`, error.response?.status, error.response?.statusText);\r\n    throw new Error(`Card not found: ${cardName}`);\r\n  }\r\n};\r\n\r\n// Fetch multiple cards with error handling\r\nexport const fetchMultipleCards = async (cards) => {\r\n  const results = [];\r\n  const errors = [];\r\n\r\n  for (const card of cards) {\r\n    try {\r\n      const cardData = await fetchCardData(card.name, card.setCode);\r\n      // Add the card multiple times based on quantity\r\n      for (let i = 0; i < card.quantity; i++) {\r\n        results.push(cardData);\r\n      }\r\n    } catch (error) {\r\n      errors.push(`${card.name}: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  return { results, errors };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}