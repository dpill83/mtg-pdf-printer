{"ast":null,"code":"import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = decklistText => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+\\d+)?$/);\n    if (match) {\n      const [, quantity, cardName, setCode] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null\n      });\n    }\n  }\n  return cards;\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null) => {\n  try {\n    let searchQuery;\n    if (setCode) {\n      // Use exact name search with set filter\n      searchQuery = `!\"${cardName}\" set:${setCode}`;\n    } else {\n      // Use exact name search without set filter\n      searchQuery = `!\"${cardName}\"`;\n    }\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: searchQuery,\n        unique: 'cards'\n      }\n    });\n    if (response.data.data && response.data.data.length > 0) {\n      var _card$image_uris, _card$card_faces, _card$card_faces$, _card$card_faces$$ima;\n      const card = response.data.data[0];\n      return {\n        name: card.name,\n        imageUrl: ((_card$image_uris = card.image_uris) === null || _card$image_uris === void 0 ? void 0 : _card$image_uris.png) || ((_card$card_faces = card.card_faces) === null || _card$card_faces === void 0 ? void 0 : (_card$card_faces$ = _card$card_faces[0]) === null || _card$card_faces$ === void 0 ? void 0 : (_card$card_faces$$ima = _card$card_faces$.image_uris) === null || _card$card_faces$$ima === void 0 ? void 0 : _card$card_faces$$ima.png),\n        set: card.set_name,\n        collectorNumber: card.collector_number\n      };\n    }\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    var _error$response, _error$response2;\n    // If set-specific search failed, try name-only search\n    if (setCode && (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 404 || ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.status) === 400)) {\n      try {\n        console.log(`Retrying search for ${cardName} without set code...`);\n        const fallbackResponse = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: `!\"${cardName}\"`,\n            unique: 'cards'\n          }\n        });\n        if (fallbackResponse.data.data && fallbackResponse.data.data.length > 0) {\n          var _card$image_uris2, _card$card_faces2, _card$card_faces2$, _card$card_faces2$$im;\n          const card = fallbackResponse.data.data[0];\n          return {\n            name: card.name,\n            imageUrl: ((_card$image_uris2 = card.image_uris) === null || _card$image_uris2 === void 0 ? void 0 : _card$image_uris2.png) || ((_card$card_faces2 = card.card_faces) === null || _card$card_faces2 === void 0 ? void 0 : (_card$card_faces2$ = _card$card_faces2[0]) === null || _card$card_faces2$ === void 0 ? void 0 : (_card$card_faces2$$im = _card$card_faces2$.image_uris) === null || _card$card_faces2$$im === void 0 ? void 0 : _card$card_faces2$$im.png),\n            set: card.set_name,\n            collectorNumber: card.collector_number\n          };\n        }\n      } catch (fallbackError) {\n        console.error(`Fallback search also failed for ${cardName}:`, fallbackError);\n      }\n    }\n    console.error(`Error fetching card ${cardName}:`, error);\n    throw new Error(`Card not found: ${cardName}${setCode ? ` in set ${setCode}` : ''}`);\n  }\n};\n\n// Fetch multiple cards with error handling\nexport const fetchMultipleCards = async cards => {\n  const results = [];\n  const errors = [];\n  for (const card of cards) {\n    try {\n      const cardData = await fetchCardData(card.name, card.setCode);\n      // Add the card multiple times based on quantity\n      for (let i = 0; i < card.quantity; i++) {\n        results.push(cardData);\n      }\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n    }\n  }\n  return {\n    results,\n    errors\n  };\n};","map":{"version":3,"names":["axios","parseDecklist","decklistText","lines","trim","split","cards","line","trimmedLine","match","quantity","cardName","setCode","push","parseInt","name","fetchCardData","searchQuery","response","get","params","q","unique","data","length","_card$image_uris","_card$card_faces","_card$card_faces$","_card$card_faces$$ima","card","imageUrl","image_uris","png","card_faces","set","set_name","collectorNumber","collector_number","Error","error","_error$response","_error$response2","status","console","log","fallbackResponse","_card$image_uris2","_card$card_faces2","_card$card_faces2$","_card$card_faces2$$im","fallbackError","fetchMultipleCards","results","errors","cardData","i","message"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/utils/scryfall.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Parse decklist text into card objects\r\nexport const parseDecklist = (decklistText) => {\r\n  const lines = decklistText.trim().split('\\n');\r\n  const cards = [];\r\n\r\n  for (const line of lines) {\r\n    const trimmedLine = line.trim();\r\n    if (!trimmedLine) continue;\r\n\r\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\r\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+\\d+)?$/);\r\n    \r\n    if (match) {\r\n      const [, quantity, cardName, setCode] = match;\r\n      cards.push({\r\n        quantity: parseInt(quantity),\r\n        name: cardName.trim(),\r\n        setCode: setCode ? setCode.trim() : null\r\n      });\r\n    }\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\n// Fetch card data from Scryfall API\r\nexport const fetchCardData = async (cardName, setCode = null) => {\r\n  try {\r\n    let searchQuery;\r\n    \r\n    if (setCode) {\r\n      // Use exact name search with set filter\r\n      searchQuery = `!\"${cardName}\" set:${setCode}`;\r\n    } else {\r\n      // Use exact name search without set filter\r\n      searchQuery = `!\"${cardName}\"`;\r\n    }\r\n\r\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\r\n      params: {\r\n        q: searchQuery,\r\n        unique: 'cards'\r\n      }\r\n    });\r\n\r\n    if (response.data.data && response.data.data.length > 0) {\r\n      const card = response.data.data[0];\r\n      return {\r\n        name: card.name,\r\n        imageUrl: card.image_uris?.png || card.card_faces?.[0]?.image_uris?.png,\r\n        set: card.set_name,\r\n        collectorNumber: card.collector_number\r\n      };\r\n    }\r\n    \r\n    throw new Error(`Card not found: ${cardName}`);\r\n  } catch (error) {\r\n    // If set-specific search failed, try name-only search\r\n    if (setCode && (error.response?.status === 404 || error.response?.status === 400)) {\r\n      try {\r\n        console.log(`Retrying search for ${cardName} without set code...`);\r\n        const fallbackResponse = await axios.get(`https://api.scryfall.com/cards/search`, {\r\n          params: {\r\n            q: `!\"${cardName}\"`,\r\n            unique: 'cards'\r\n          }\r\n        });\r\n\r\n        if (fallbackResponse.data.data && fallbackResponse.data.data.length > 0) {\r\n          const card = fallbackResponse.data.data[0];\r\n          return {\r\n            name: card.name,\r\n            imageUrl: card.image_uris?.png || card.card_faces?.[0]?.image_uris?.png,\r\n            set: card.set_name,\r\n            collectorNumber: card.collector_number\r\n          };\r\n        }\r\n      } catch (fallbackError) {\r\n        console.error(`Fallback search also failed for ${cardName}:`, fallbackError);\r\n      }\r\n    }\r\n    \r\n    console.error(`Error fetching card ${cardName}:`, error);\r\n    throw new Error(`Card not found: ${cardName}${setCode ? ` in set ${setCode}` : ''}`);\r\n  }\r\n};\r\n\r\n// Fetch multiple cards with error handling\r\nexport const fetchMultipleCards = async (cards) => {\r\n  const results = [];\r\n  const errors = [];\r\n\r\n  for (const card of cards) {\r\n    try {\r\n      const cardData = await fetchCardData(card.name, card.setCode);\r\n      // Add the card multiple times based on quantity\r\n      for (let i = 0; i < card.quantity; i++) {\r\n        results.push(cardData);\r\n      }\r\n    } catch (error) {\r\n      errors.push(`${card.name}: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  return { results, errors };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}