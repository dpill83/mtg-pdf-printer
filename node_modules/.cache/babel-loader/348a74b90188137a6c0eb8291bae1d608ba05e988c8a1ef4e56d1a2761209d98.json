{"ast":null,"code":"import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = decklistText => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+\\d+)?$/);\n    if (match) {\n      const [, quantity, cardName, setCode] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null\n      });\n    }\n  }\n  return cards;\n};\n\n// Test function to verify API is working\nexport const testScryfallAPI = async () => {\n  try {\n    console.log('Testing Scryfall API...');\n\n    // Test 1: Simple card search\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\n\n    // Test 2: Set-specific search\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\" set:M11',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\n\n    // Test 3: Counterspell search\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Counterspell\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\n    return true;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('API test failed:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText);\n    return false;\n  }\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null) => {\n  try {\n    // Always try name-only search first (most reliable)\n    console.log(`Searching for: !\"${cardName}\"`);\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: `!\"${cardName}\"`,\n        unique: 'cards'\n      }\n    });\n    if (response.data.data && response.data.data.length > 0) {\n      var _card$image_uris, _card$card_faces, _card$card_faces$, _card$card_faces$$ima;\n      const card = response.data.data[0];\n      console.log(`Found ${cardName} in set ${card.set_name}`);\n      return {\n        name: card.name,\n        imageUrl: ((_card$image_uris = card.image_uris) === null || _card$image_uris === void 0 ? void 0 : _card$image_uris.png) || ((_card$card_faces = card.card_faces) === null || _card$card_faces === void 0 ? void 0 : (_card$card_faces$ = _card$card_faces[0]) === null || _card$card_faces$ === void 0 ? void 0 : (_card$card_faces$$ima = _card$card_faces$.image_uris) === null || _card$card_faces$$ima === void 0 ? void 0 : _card$card_faces$$ima.png),\n        set: card.set_name,\n        collectorNumber: card.collector_number\n      };\n    }\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    var _error$response3, _error$response4;\n    console.error(`Error fetching card ${cardName}:`, (_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status, (_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.statusText);\n    throw new Error(`Card not found: ${cardName}`);\n  }\n};\n\n// Fetch multiple cards with error handling\nexport const fetchMultipleCards = async cards => {\n  const results = [];\n  const errors = [];\n  for (const card of cards) {\n    try {\n      const cardData = await fetchCardData(card.name, card.setCode);\n      // Add the card multiple times based on quantity\n      for (let i = 0; i < card.quantity; i++) {\n        results.push(cardData);\n      }\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n    }\n  }\n  return {\n    results,\n    errors\n  };\n};","map":{"version":3,"names":["axios","parseDecklist","decklistText","lines","trim","split","cards","line","trimmedLine","match","quantity","cardName","setCode","push","parseInt","name","testScryfallAPI","console","log","response1","get","params","q","unique","data","length","response2","response3","error","_error$response","_error$response2","response","status","statusText","fetchCardData","_card$image_uris","_card$card_faces","_card$card_faces$","_card$card_faces$$ima","card","set_name","imageUrl","image_uris","png","card_faces","set","collectorNumber","collector_number","Error","_error$response3","_error$response4","fetchMultipleCards","results","errors","cardData","i","message"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/utils/scryfall.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Parse decklist text into card objects\r\nexport const parseDecklist = (decklistText) => {\r\n  const lines = decklistText.trim().split('\\n');\r\n  const cards = [];\r\n\r\n  for (const line of lines) {\r\n    const trimmedLine = line.trim();\r\n    if (!trimmedLine) continue;\r\n\r\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\r\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+\\d+)?$/);\r\n    \r\n    if (match) {\r\n      const [, quantity, cardName, setCode] = match;\r\n      cards.push({\r\n        quantity: parseInt(quantity),\r\n        name: cardName.trim(),\r\n        setCode: setCode ? setCode.trim() : null\r\n      });\r\n    }\r\n  }\r\n\r\n  return cards;\r\n};\r\n\r\n// Test function to verify API is working\r\nexport const testScryfallAPI = async () => {\r\n  try {\r\n    console.log('Testing Scryfall API...');\r\n    \r\n    // Test 1: Simple card search\r\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\r\n      params: { q: '!\"Lightning Bolt\"', unique: 'cards' }\r\n    });\r\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\r\n    \r\n    // Test 2: Set-specific search\r\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\r\n      params: { q: '!\"Lightning Bolt\" set:M11', unique: 'cards' }\r\n    });\r\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\r\n    \r\n    // Test 3: Counterspell search\r\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\r\n      params: { q: '!\"Counterspell\"', unique: 'cards' }\r\n    });\r\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\r\n    \r\n    return true;\r\n  } catch (error) {\r\n    console.error('API test failed:', error.response?.status, error.response?.statusText);\r\n    return false;\r\n  }\r\n};\r\n\r\n// Fetch card data from Scryfall API\r\nexport const fetchCardData = async (cardName, setCode = null) => {\r\n  try {\r\n    // Always try name-only search first (most reliable)\r\n    console.log(`Searching for: !\"${cardName}\"`);\r\n    \r\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\r\n      params: {\r\n        q: `!\"${cardName}\"`,\r\n        unique: 'cards'\r\n      }\r\n    });\r\n\r\n    if (response.data.data && response.data.data.length > 0) {\r\n      const card = response.data.data[0];\r\n      console.log(`Found ${cardName} in set ${card.set_name}`);\r\n      return {\r\n        name: card.name,\r\n        imageUrl: card.image_uris?.png || card.card_faces?.[0]?.image_uris?.png,\r\n        set: card.set_name,\r\n        collectorNumber: card.collector_number\r\n      };\r\n    }\r\n    \r\n    throw new Error(`Card not found: ${cardName}`);\r\n  } catch (error) {\r\n    console.error(`Error fetching card ${cardName}:`, error.response?.status, error.response?.statusText);\r\n    throw new Error(`Card not found: ${cardName}`);\r\n  }\r\n};\r\n\r\n// Fetch multiple cards with error handling\r\nexport const fetchMultipleCards = async (cards) => {\r\n  const results = [];\r\n  const errors = [];\r\n\r\n  for (const card of cards) {\r\n    try {\r\n      const cardData = await fetchCardData(card.name, card.setCode);\r\n      // Add the card multiple times based on quantity\r\n      for (let i = 0; i < card.quantity; i++) {\r\n        results.push(cardData);\r\n      }\r\n    } catch (error) {\r\n      errors.push(`${card.name}: ${error.message}`);\r\n    }\r\n  }\r\n\r\n  return { results, errors };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}