{"ast":null,"code":"var _jsxFileName = \"C:\\\\MTG\\\\mtg-pdf-printer\\\\mtg-pdf-printer\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DeckInput from './components/DeckInput';\nimport CardGrid from './components/CardGrid';\nimport PrintOptions from './components/PrintOptions';\nimport { parseDecklist, fetchMultipleCards, fetchAllPrintings } from './utils/scryfall';\nimport { generatePDF, downloadPDF } from './utils/pdfGenerator';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [generatingPDF, setGeneratingPDF] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const [success, setSuccess] = useState('');\n\n  // Print options state\n  const [cropMarks, setCropMarks] = useState(true);\n  const [cutLines, setCutLines] = useState(false);\n  const [blackCorners, setBlackCorners] = useState(true);\n  const [skipBasicLands, setSkipBasicLands] = useState(false);\n  const [printChecklist, setPrintChecklist] = useState(false);\n  const [playtestWatermark, setPlaytestWatermark] = useState(false);\n  const [paperSize, setPaperSize] = useState('letter');\n  const [scale, setScale] = useState('100');\n\n  // Track selected printing for each card (by index)\n  const [selectedPrintings, setSelectedPrintings] = useState({});\n\n  // Paper size options\n  const paperSizes = [{\n    value: 'letter',\n    label: 'Letter (8.5x11.0 in)',\n    width: 8.5,\n    height: 11.0\n  }, {\n    value: 'legal',\n    label: 'Legal (8.5x14.0 in)',\n    width: 8.5,\n    height: 14.0\n  }, {\n    value: 'a4',\n    label: 'A4 (8.27x11.69 in)',\n    width: 8.27,\n    height: 11.69\n  }, {\n    value: 'a3',\n    label: 'A3 (11.69x16.54 in)',\n    width: 11.69,\n    height: 16.54\n  }, {\n    value: 'tabloid',\n    label: 'Tabloid (11x17 in)',\n    width: 11,\n    height: 17\n  }];\n  const handleDeckSubmit = async decklistText => {\n    setLoading(true);\n    setErrors([]);\n    setSuccess('');\n    setCards([]);\n    setSelectedPrintings({});\n    try {\n      // Parse the decklist\n      const parsedCards = parseDecklist(decklistText);\n      if (parsedCards.length === 0) {\n        setErrors(['No valid cards found in the decklist. Please check the format.']);\n        setLoading(false);\n        return;\n      }\n\n      // Fetch card data from Scryfall\n      const {\n        results,\n        errors: fetchErrors\n      } = await fetchMultipleCards(parsedCards);\n      if (results.length === 0) {\n        setErrors(['No cards could be found. Please check the card names and try again.']);\n        setLoading(false);\n        return;\n      }\n\n      // For each card, fetch all printings and set up the card object\n      const cardsWithPrintings = await Promise.all(results.map(async (card, idx) => {\n        let printings = [];\n        try {\n          if (card.prints_search_uri) {\n            printings = await fetchAllPrintings(card.prints_search_uri);\n          }\n        } catch (e) {\n          printings = [];\n        }\n        // Default to the originally loaded card\n        const selectedPrinting = printings.find(p => p.set_name === card.set && p.collector_number === card.collectorNumber) || printings[0];\n        const cardWithPrintings = {\n          ...card,\n          printings: printings.map(p => {\n            var _p$image_uris, _p$card_faces, _p$card_faces$, _p$card_faces$$image_;\n            return {\n              id: p.id,\n              set_name: p.set_name,\n              collector_number: p.collector_number,\n              released_at: p.released_at,\n              imageUrl: ((_p$image_uris = p.image_uris) === null || _p$image_uris === void 0 ? void 0 : _p$image_uris.png) || ((_p$card_faces = p.card_faces) === null || _p$card_faces === void 0 ? void 0 : (_p$card_faces$ = _p$card_faces[0]) === null || _p$card_faces$ === void 0 ? void 0 : (_p$card_faces$$image_ = _p$card_faces$.image_uris) === null || _p$card_faces$$image_ === void 0 ? void 0 : _p$card_faces$$image_.png)\n            };\n          }),\n          selectedPrintingId: selectedPrinting ? selectedPrinting.id : null\n        };\n        console.log('Card with printings:', cardWithPrintings.name, 'printings:', cardWithPrintings.printings.length, cardWithPrintings.printings[0]);\n        return cardWithPrintings;\n      }));\n\n      // Proxy the image URLs for the selected printing\n      const proxiedCards = cardsWithPrintings.map(card => {\n        const selected = card.printings.find(p => p.id === card.selectedPrintingId) || card.printings[0];\n        return {\n          ...card,\n          imageUrl: selected && selected.imageUrl ? `http://localhost:4000/proxy?url=${encodeURIComponent(selected.imageUrl)}` : card.imageUrl\n        };\n      });\n      setCards(proxiedCards);\n      if (fetchErrors.length > 0) {\n        setErrors(fetchErrors);\n      } else {\n        setSuccess(`Successfully loaded ${results.length} cards!`);\n      }\n    } catch (error) {\n      setErrors([`Error loading cards: ${error.message}`]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handler for when a user selects a different printing\n  const handleSelectPrinting = (cardIdx, printingId) => {\n    setCards(prevCards => prevCards.map((card, idx) => {\n      if (idx !== cardIdx) return card;\n      const selected = card.printings.find(p => p.id === printingId) || card.printings[0];\n      return {\n        ...card,\n        selectedPrintingId: selected.id,\n        imageUrl: selected && selected.imageUrl ? `http://localhost:4000/proxy?url=${encodeURIComponent(selected.imageUrl)}` : card.imageUrl\n      };\n    }));\n  };\n  const handleGeneratePDF = async () => {\n    if (cards.length === 0) {\n      setErrors(['No cards to generate PDF for. Please load a decklist first.']);\n      return;\n    }\n    setGeneratingPDF(true);\n    setErrors([]);\n    setSuccess('');\n    try {\n      // Find the selected paper size object\n      const paper = paperSizes.find(p => p.value === paperSize) || paperSizes[0];\n      // Pass paper size and scale to generatePDF\n      const pdfBytes = await generatePDF(cards, paper, Number(scale));\n      downloadPDF(pdfBytes, 'mtg-deck.pdf');\n      setSuccess('PDF generated and downloaded successfully!');\n    } catch (error) {\n      setErrors([`Error generating PDF: ${error.message}`]);\n    } finally {\n      setGeneratingPDF(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"app-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"MTG PDF Printer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Generate print-ready PDFs from Magic: The Gathering decklists\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: [/*#__PURE__*/_jsxDEV(DeckInput, {\n          onDeckSubmit: handleDeckSubmit,\n          loading: loading,\n          onGeneratePDF: handleGeneratePDF,\n          generatingPDF: generatingPDF,\n          canGeneratePDF: cards.length > 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(PrintOptions, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), errors.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"error\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Errors:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 15\n          }, this), errors.map((error, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n            children: error\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 17\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 11\n      }, this), success && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"success\",\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            children: success\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 182,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this), cards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"preview-section\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Card Preview (3x3 Grid)\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CardGrid, {\n            cards: cards,\n            loading: loading,\n            onSelectPrinting: handleSelectPrinting\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 191,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"pdf-actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              onClick: handleGeneratePDF,\n              disabled: generatingPDF || cards.length === 0,\n              children: generatingPDF ? 'Generating PDF...' : 'Generate PDF'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 193,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pdf-info\",\n              children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Print-ready PDF with 9 cards per page\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Standard card size (2.5\\\" x 3.5\\\")\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 Minimal margins for optimal printing\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 203,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"\\u2022 No watermarks or branding\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 200,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 192,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"footer\", {\n        className: \"app-footer\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"footer-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"\\xA9 2024 MTG PDF Printer. Made with \\u2764\\uFE0F for Magic players.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"coffee-button\",\n            children: /*#__PURE__*/_jsxDEV(\"a\", {\n              href: \"https://www.buymeacoffee.com/gOZTM9e\",\n              target: \"_blank\",\n              rel: \"noopener noreferrer\",\n              children: /*#__PURE__*/_jsxDEV(\"img\", {\n                src: \"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=gOZTM9e&button_colour=FFDD00&font_colour=000000&font_family=Poppins&outline_colour=000000&coffee_colour=ffffff\",\n                alt: \"Buy me a coffee\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 216,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 215,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 214,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"wEEE6hM1cZGhEXaxJl88xNFeNYw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DeckInput","CardGrid","PrintOptions","parseDecklist","fetchMultipleCards","fetchAllPrintings","generatePDF","downloadPDF","jsxDEV","_jsxDEV","App","_s","cards","setCards","loading","setLoading","generatingPDF","setGeneratingPDF","errors","setErrors","success","setSuccess","cropMarks","setCropMarks","cutLines","setCutLines","blackCorners","setBlackCorners","skipBasicLands","setSkipBasicLands","printChecklist","setPrintChecklist","playtestWatermark","setPlaytestWatermark","paperSize","setPaperSize","scale","setScale","selectedPrintings","setSelectedPrintings","paperSizes","value","label","width","height","handleDeckSubmit","decklistText","parsedCards","length","results","fetchErrors","cardsWithPrintings","Promise","all","map","card","idx","printings","prints_search_uri","e","selectedPrinting","find","p","set_name","set","collector_number","collectorNumber","cardWithPrintings","_p$image_uris","_p$card_faces","_p$card_faces$","_p$card_faces$$image_","id","released_at","imageUrl","image_uris","png","card_faces","selectedPrintingId","console","log","name","proxiedCards","selected","encodeURIComponent","error","message","handleSelectPrinting","cardIdx","printingId","prevCards","handleGeneratePDF","paper","pdfBytes","Number","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onDeckSubmit","onGeneratePDF","canGeneratePDF","index","onSelectPrinting","onClick","disabled","href","target","rel","src","alt","_c","$RefreshReg$"],"sources":["C:/MTG/mtg-pdf-printer/mtg-pdf-printer/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport DeckInput from './components/DeckInput';\nimport CardGrid from './components/CardGrid';\nimport PrintOptions from './components/PrintOptions';\nimport { parseDecklist, fetchMultipleCards, fetchAllPrintings } from './utils/scryfall';\nimport { generatePDF, downloadPDF } from './utils/pdfGenerator';\nimport './App.css';\n\nfunction App() {\n  const [cards, setCards] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [generatingPDF, setGeneratingPDF] = useState(false);\n  const [errors, setErrors] = useState([]);\n  const [success, setSuccess] = useState('');\n\n  // Print options state\n  const [cropMarks, setCropMarks] = useState(true);\n  const [cutLines, setCutLines] = useState(false);\n  const [blackCorners, setBlackCorners] = useState(true);\n  const [skipBasicLands, setSkipBasicLands] = useState(false);\n  const [printChecklist, setPrintChecklist] = useState(false);\n  const [playtestWatermark, setPlaytestWatermark] = useState(false);\n  const [paperSize, setPaperSize] = useState('letter');\n  const [scale, setScale] = useState('100');\n\n  // Track selected printing for each card (by index)\n  const [selectedPrintings, setSelectedPrintings] = useState({});\n\n  // Paper size options\n  const paperSizes = [\n    { value: 'letter', label: 'Letter (8.5x11.0 in)', width: 8.5, height: 11.0 },\n    { value: 'legal', label: 'Legal (8.5x14.0 in)', width: 8.5, height: 14.0 },\n    { value: 'a4', label: 'A4 (8.27x11.69 in)', width: 8.27, height: 11.69 },\n    { value: 'a3', label: 'A3 (11.69x16.54 in)', width: 11.69, height: 16.54 },\n    { value: 'tabloid', label: 'Tabloid (11x17 in)', width: 11, height: 17 },\n  ];\n\n  const handleDeckSubmit = async (decklistText) => {\n    setLoading(true);\n    setErrors([]);\n    setSuccess('');\n    setCards([]);\n    setSelectedPrintings({});\n\n    try {\n      // Parse the decklist\n      const parsedCards = parseDecklist(decklistText);\n      if (parsedCards.length === 0) {\n        setErrors(['No valid cards found in the decklist. Please check the format.']);\n        setLoading(false);\n        return;\n      }\n\n      // Fetch card data from Scryfall\n      const { results, errors: fetchErrors } = await fetchMultipleCards(parsedCards);\n      if (results.length === 0) {\n        setErrors(['No cards could be found. Please check the card names and try again.']);\n        setLoading(false);\n        return;\n      }\n\n      // For each card, fetch all printings and set up the card object\n      const cardsWithPrintings = await Promise.all(results.map(async (card, idx) => {\n        let printings = [];\n        try {\n          if (card.prints_search_uri) {\n            printings = await fetchAllPrintings(card.prints_search_uri);\n          }\n        } catch (e) {\n          printings = [];\n        }\n        // Default to the originally loaded card\n        const selectedPrinting = printings.find(p => p.set_name === card.set && p.collector_number === card.collectorNumber) || printings[0];\n        const cardWithPrintings = {\n          ...card,\n          printings: printings.map(p => ({\n            id: p.id,\n            set_name: p.set_name,\n            collector_number: p.collector_number,\n            released_at: p.released_at,\n            imageUrl: p.image_uris?.png || p.card_faces?.[0]?.image_uris?.png,\n          })),\n          selectedPrintingId: selectedPrinting ? selectedPrinting.id : null,\n        };\n        console.log('Card with printings:', cardWithPrintings.name, 'printings:', cardWithPrintings.printings.length, cardWithPrintings.printings[0]);\n        return cardWithPrintings;\n      }));\n\n      // Proxy the image URLs for the selected printing\n      const proxiedCards = cardsWithPrintings.map(card => {\n        const selected = card.printings.find(p => p.id === card.selectedPrintingId) || card.printings[0];\n        return {\n          ...card,\n          imageUrl: selected && selected.imageUrl ? `http://localhost:4000/proxy?url=${encodeURIComponent(selected.imageUrl)}` : card.imageUrl,\n        };\n      });\n\n      setCards(proxiedCards);\n\n      if (fetchErrors.length > 0) {\n        setErrors(fetchErrors);\n      } else {\n        setSuccess(`Successfully loaded ${results.length} cards!`);\n      }\n    } catch (error) {\n      setErrors([`Error loading cards: ${error.message}`]);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Handler for when a user selects a different printing\n  const handleSelectPrinting = (cardIdx, printingId) => {\n    setCards(prevCards => prevCards.map((card, idx) => {\n      if (idx !== cardIdx) return card;\n      const selected = card.printings.find(p => p.id === printingId) || card.printings[0];\n      return {\n        ...card,\n        selectedPrintingId: selected.id,\n        imageUrl: selected && selected.imageUrl\n          ? `http://localhost:4000/proxy?url=${encodeURIComponent(selected.imageUrl)}`\n          : card.imageUrl,\n      };\n    }));\n  };\n\n  const handleGeneratePDF = async () => {\n    if (cards.length === 0) {\n      setErrors(['No cards to generate PDF for. Please load a decklist first.']);\n      return;\n    }\n    setGeneratingPDF(true);\n    setErrors([]);\n    setSuccess('');\n    try {\n      // Find the selected paper size object\n      const paper = paperSizes.find(p => p.value === paperSize) || paperSizes[0];\n      // Pass paper size and scale to generatePDF\n      const pdfBytes = await generatePDF(cards, paper, Number(scale));\n      downloadPDF(pdfBytes, 'mtg-deck.pdf');\n      setSuccess('PDF generated and downloaded successfully!');\n    } catch (error) {\n      setErrors([`Error generating PDF: ${error.message}`]);\n    } finally {\n      setGeneratingPDF(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <header className=\"app-header\">\n          <h1>MTG PDF Printer</h1>\n          <p>Generate print-ready PDFs from Magic: The Gathering decklists</p>\n        </header>\n\n        <div className=\"card\">\n          <DeckInput\n            onDeckSubmit={handleDeckSubmit}\n            loading={loading}\n            onGeneratePDF={handleGeneratePDF}\n            generatingPDF={generatingPDF}\n            canGeneratePDF={cards.length > 0}\n          />\n          <PrintOptions />\n        </div>\n\n        {errors.length > 0 && (\n          <div className=\"card\">\n            <div className=\"error\">\n              <h3>Errors:</h3>\n              {errors.map((error, index) => (\n                <p key={index}>{error}</p>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {success && (\n          <div className=\"card\">\n            <div className=\"success\">\n              <p>{success}</p>\n            </div>\n          </div>\n        )}\n\n        {cards.length > 0 && (\n          <div className=\"card\">\n            <div className=\"preview-section\">\n              <h2>Card Preview (3x3 Grid)</h2>\n              <CardGrid cards={cards} loading={loading} onSelectPrinting={handleSelectPrinting} />\n              <div className=\"pdf-actions\">\n                <button\n                  className=\"btn btn-success\"\n                  onClick={handleGeneratePDF}\n                  disabled={generatingPDF || cards.length === 0}\n                >\n                  {generatingPDF ? 'Generating PDF...' : 'Generate PDF'}\n                </button>\n                <div className=\"pdf-info\">\n                  <p>• Print-ready PDF with 9 cards per page</p>\n                  <p>• Standard card size (2.5\" x 3.5\")</p>\n                  <p>• Minimal margins for optimal printing</p>\n                  <p>• No watermarks or branding</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        <footer className=\"app-footer\">\n          <div className=\"footer-content\">\n            <p>&copy; 2024 MTG PDF Printer. Made with ❤️ for Magic players.</p>\n            <div className=\"coffee-button\">\n              <a href=\"https://www.buymeacoffee.com/gOZTM9e\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <img \n                  src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=gOZTM9e&button_colour=FFDD00&font_colour=000000&font_family=Poppins&outline_colour=000000&coffee_colour=ffffff\" \n                  alt=\"Buy me a coffee\"\n                />\n              </a>\n            </div>\n          </div>\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}