{"ast":null,"code":"import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = decklistText => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+(\\d+))?$/);\n    if (match) {\n      const [, quantity, cardName, setCode, collectorNumber] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null,\n        collectorNumber: collectorNumber ? collectorNumber.trim() : null\n      });\n      continue;\n    }\n    // Match lines with only a card name\n    const nameOnly = trimmedLine.match(/^([A-Za-z0-9',:!\\- ]+)$/);\n    if (nameOnly) {\n      cards.push({\n        quantity: 1,\n        name: nameOnly[1].trim(),\n        setCode: null,\n        collectorNumber: null\n      });\n    }\n  }\n  console.log('Parsed decklist:', cards);\n  return cards;\n};\n\n// Test function to verify API is working\nexport const testScryfallAPI = async () => {\n  try {\n    console.log('Testing Scryfall API...');\n\n    // Test 1: Simple card search\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\n\n    // Test 2: Set-specific search\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\" set:M11',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\n\n    // Test 3: Counterspell search\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Counterspell\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\n    return true;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('API test failed:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText);\n    return false;\n  }\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null, collectorNumber = null) => {\n  // Helper to extract most recent printing\n  const getMostRecent = data => data && data.length > 0 ? data[0] : null;\n  try {\n    // 1. Strict: name + set + full collector number\n    let query = `!\"${cardName}\"`;\n    if (setCode && collectorNumber) {\n      query += ` set:${setCode} number:${collectorNumber}`;\n    } else if (setCode) {\n      query += ` set:${setCode}`;\n    }\n    let response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: query,\n        unique: 'prints',\n        order: 'released',\n        dir: 'desc'\n      }\n    });\n    let card = getMostRecent(response.data.data);\n    if (card) {\n      var _card$image_uris, _card$card_faces, _card$card_faces$, _card$card_faces$$ima;\n      console.log(`[Scryfall] Found by name+set+collector: ${cardName} (${setCode}) ${collectorNumber}`);\n      const imageUrl = ((_card$image_uris = card.image_uris) === null || _card$image_uris === void 0 ? void 0 : _card$image_uris.large) || ((_card$card_faces = card.card_faces) === null || _card$card_faces === void 0 ? void 0 : (_card$card_faces$ = _card$card_faces[0]) === null || _card$card_faces$ === void 0 ? void 0 : (_card$card_faces$$ima = _card$card_faces$.image_uris) === null || _card$card_faces$$ima === void 0 ? void 0 : _card$card_faces$$ima.large);\n      return {\n        name: card.name,\n        imageUrl: imageUrl,\n        set: card.set,\n        setCode: card.set,\n        set_name: card.set_name,\n        collectorNumber: card.collector_number,\n        prints_search_uri: card.prints_search_uri\n      };\n    }\n    // 2. If collector number ends with a letter, try numeric part only\n    if (setCode && collectorNumber && /\\d+[a-zA-Z]$/.test(collectorNumber)) {\n      const numericCollectorNumber = collectorNumber.match(/\\d+/)[0];\n      let queryNum = `!\"${cardName}\" set:${setCode} number:${numericCollectorNumber}`;\n      let respNum = await axios.get(`https://api.scryfall.com/cards/search`, {\n        params: {\n          q: queryNum,\n          unique: 'prints',\n          order: 'released',\n          dir: 'desc'\n        }\n      });\n      let cardNum = getMostRecent(respNum.data.data);\n      if (cardNum) {\n        var _cardNum$image_uris, _cardNum$card_faces, _cardNum$card_faces$, _cardNum$card_faces$$;\n        console.log(`[Scryfall fallback] Found by name+set+numeric number: ${cardName} (${setCode}) ${numericCollectorNumber}`);\n        const imageUrl = ((_cardNum$image_uris = cardNum.image_uris) === null || _cardNum$image_uris === void 0 ? void 0 : _cardNum$image_uris.large) || ((_cardNum$card_faces = cardNum.card_faces) === null || _cardNum$card_faces === void 0 ? void 0 : (_cardNum$card_faces$ = _cardNum$card_faces[0]) === null || _cardNum$card_faces$ === void 0 ? void 0 : (_cardNum$card_faces$$ = _cardNum$card_faces$.image_uris) === null || _cardNum$card_faces$$ === void 0 ? void 0 : _cardNum$card_faces$$.large);\n        return {\n          name: cardNum.name,\n          imageUrl: imageUrl,\n          set: cardNum.set,\n          setCode: cardNum.set,\n          set_name: cardNum.set_name,\n          collectorNumber: cardNum.collector_number,\n          prints_search_uri: cardNum.prints_search_uri\n        };\n      }\n    }\n    // 3. Try name + set (ignore collector number)\n    if (setCode) {\n      let fallbackQuery = `!\"${cardName}\" set:${setCode}`;\n      let fallbackResp = await axios.get(`https://api.scryfall.com/cards/search`, {\n        params: {\n          q: fallbackQuery,\n          unique: 'prints',\n          order: 'released',\n          dir: 'desc'\n        }\n      });\n      let cardSet = getMostRecent(fallbackResp.data.data);\n      if (cardSet) {\n        var _cardSet$image_uris, _cardSet$card_faces, _cardSet$card_faces$, _cardSet$card_faces$$;\n        console.log(`[Scryfall fallback] Found by name+set: ${cardName} (${setCode})`);\n        const imageUrl = ((_cardSet$image_uris = cardSet.image_uris) === null || _cardSet$image_uris === void 0 ? void 0 : _cardSet$image_uris.large) || ((_cardSet$card_faces = cardSet.card_faces) === null || _cardSet$card_faces === void 0 ? void 0 : (_cardSet$card_faces$ = _cardSet$card_faces[0]) === null || _cardSet$card_faces$ === void 0 ? void 0 : (_cardSet$card_faces$$ = _cardSet$card_faces$.image_uris) === null || _cardSet$card_faces$$ === void 0 ? void 0 : _cardSet$card_faces$$.large);\n        return {\n          name: cardSet.name,\n          imageUrl: imageUrl,\n          set: cardSet.set,\n          setCode: cardSet.set,\n          set_name: cardSet.set_name,\n          collectorNumber: cardSet.collector_number,\n          prints_search_uri: cardSet.prints_search_uri\n        };\n      }\n    }\n    // 4. Try name only\n    let fallbackQuery2 = `!\"${cardName}\"`;\n    let fallbackResp2 = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: fallbackQuery2,\n        unique: 'prints',\n        order: 'released',\n        dir: 'desc'\n      }\n    });\n    let cardNameOnly = getMostRecent(fallbackResp2.data.data);\n    if (cardNameOnly) {\n      var _cardNameOnly$image_u, _cardNameOnly$card_fa, _cardNameOnly$card_fa2, _cardNameOnly$card_fa3;\n      console.log(`[Scryfall fallback] Found by name only: ${cardName}`);\n      const imageUrl = ((_cardNameOnly$image_u = cardNameOnly.image_uris) === null || _cardNameOnly$image_u === void 0 ? void 0 : _cardNameOnly$image_u.large) || ((_cardNameOnly$card_fa = cardNameOnly.card_faces) === null || _cardNameOnly$card_fa === void 0 ? void 0 : (_cardNameOnly$card_fa2 = _cardNameOnly$card_fa[0]) === null || _cardNameOnly$card_fa2 === void 0 ? void 0 : (_cardNameOnly$card_fa3 = _cardNameOnly$card_fa2.image_uris) === null || _cardNameOnly$card_fa3 === void 0 ? void 0 : _cardNameOnly$card_fa3.large);\n      return {\n        name: cardNameOnly.name,\n        imageUrl: imageUrl,\n        set: cardNameOnly.set,\n        setCode: cardNameOnly.set,\n        set_name: cardNameOnly.set_name,\n        collectorNumber: cardNameOnly.collector_number,\n        prints_search_uri: cardNameOnly.prints_search_uri\n      };\n    }\n    // Not found\n    console.log(`[Scryfall] Card not found after all fallbacks: ${cardName} (${setCode}) ${collectorNumber}`);\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    throw new Error(`Card not found: ${cardName}`);\n  }\n};\n\n// Fetch all printings for a card using prints_search_uri\nexport const fetchAllPrintings = async prints_search_uri => {\n  try {\n    const printings = [];\n    let nextPage = prints_search_uri;\n    while (nextPage) {\n      const response = await axios.get(nextPage);\n      if (response.data.data && response.data.data.length > 0) {\n        printings.push(...response.data.data);\n      }\n      nextPage = response.data.has_more ? response.data.next_page : null;\n    }\n    // Sort by released_at descending (newest first)\n    printings.sort((a, b) => (b.released_at || '').localeCompare(a.released_at || ''));\n    return printings;\n  } catch (error) {\n    throw new Error('Failed to fetch printings');\n  }\n};\n\n// Fetch multiple cards with error handling and progress tracking\nexport const fetchMultipleCards = async (cards, onProgress = null) => {\n  const results = [];\n  const errors = [];\n  const invalidLineIndices = [];\n  for (let idx = 0; idx < cards.length; idx++) {\n    const card = cards[idx];\n\n    // Update progress\n    if (onProgress) {\n      onProgress({\n        current: idx + 1,\n        total: cards.length,\n        message: `Loading ${card.name}...`\n      });\n    }\n    try {\n      const cardData = await fetchCardData(card.name, card.setCode, card.collectorNumber);\n      const cardDataWithQuantity = {\n        ...cardData,\n        quantity: card.quantity\n      };\n      results.push(cardDataWithQuantity);\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n      invalidLineIndices.push(idx);\n    }\n  }\n  return {\n    results,\n    errors,\n    invalidLineIndices\n  };\n};","map":{"version":3,"names":["axios","parseDecklist","decklistText","lines","trim","split","cards","line","trimmedLine","match","quantity","cardName","setCode","collectorNumber","push","parseInt","name","nameOnly","console","log","testScryfallAPI","response1","get","params","q","unique","data","length","response2","response3","error","_error$response","_error$response2","response","status","statusText","fetchCardData","getMostRecent","query","order","dir","card","_card$image_uris","_card$card_faces","_card$card_faces$","_card$card_faces$$ima","imageUrl","image_uris","large","card_faces","set","set_name","collector_number","prints_search_uri","test","numericCollectorNumber","queryNum","respNum","cardNum","_cardNum$image_uris","_cardNum$card_faces","_cardNum$card_faces$","_cardNum$card_faces$$","fallbackQuery","fallbackResp","cardSet","_cardSet$image_uris","_cardSet$card_faces","_cardSet$card_faces$","_cardSet$card_faces$$","fallbackQuery2","fallbackResp2","cardNameOnly","_cardNameOnly$image_u","_cardNameOnly$card_fa","_cardNameOnly$card_fa2","_cardNameOnly$card_fa3","Error","fetchAllPrintings","printings","nextPage","has_more","next_page","sort","a","b","released_at","localeCompare","fetchMultipleCards","onProgress","results","errors","invalidLineIndices","idx","current","total","message","cardData","cardDataWithQuantity"],"sources":["C:/MTG/mtg-pdf-printer/src/utils/scryfall.js"],"sourcesContent":["import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = (decklistText) => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+(\\d+))?$/);\n    if (match) {\n      const [, quantity, cardName, setCode, collectorNumber] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null,\n        collectorNumber: collectorNumber ? collectorNumber.trim() : null\n      });\n      continue;\n    }\n    // Match lines with only a card name\n    const nameOnly = trimmedLine.match(/^([A-Za-z0-9',:!\\- ]+)$/);\n    if (nameOnly) {\n      cards.push({\n        quantity: 1,\n        name: nameOnly[1].trim(),\n        setCode: null,\n        collectorNumber: null\n      });\n    }\n  }\n  console.log('Parsed decklist:', cards);\n  return cards;\n};\n\n// Test function to verify API is working\nexport const testScryfallAPI = async () => {\n  try {\n    console.log('Testing Scryfall API...');\n    \n    // Test 1: Simple card search\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: { q: '!\"Lightning Bolt\"', unique: 'cards' }\n    });\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\n    \n    // Test 2: Set-specific search\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: { q: '!\"Lightning Bolt\" set:M11', unique: 'cards' }\n    });\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\n    \n    // Test 3: Counterspell search\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: { q: '!\"Counterspell\"', unique: 'cards' }\n    });\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\n    \n    return true;\n  } catch (error) {\n    console.error('API test failed:', error.response?.status, error.response?.statusText);\n    return false;\n  }\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null, collectorNumber = null) => {\n  // Helper to extract most recent printing\n  const getMostRecent = (data) => data && data.length > 0 ? data[0] : null;\n  try {\n    // 1. Strict: name + set + full collector number\n    let query = `!\"${cardName}\"`;\n    if (setCode && collectorNumber) {\n      query += ` set:${setCode} number:${collectorNumber}`;\n    } else if (setCode) {\n      query += ` set:${setCode}`;\n    }\n    let response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: query,\n        unique: 'prints',\n        order: 'released',\n        dir: 'desc'\n      }\n    });\n    let card = getMostRecent(response.data.data);\n    if (card) {\n      console.log(`[Scryfall] Found by name+set+collector: ${cardName} (${setCode}) ${collectorNumber}`);\n      const imageUrl = card.image_uris?.large || card.card_faces?.[0]?.image_uris?.large;\n      return {\n        name: card.name,\n        imageUrl: imageUrl,\n        set: card.set,\n        setCode: card.set,\n        set_name: card.set_name,\n        collectorNumber: card.collector_number,\n        prints_search_uri: card.prints_search_uri\n      };\n    }\n    // 2. If collector number ends with a letter, try numeric part only\n    if (setCode && collectorNumber && /\\d+[a-zA-Z]$/.test(collectorNumber)) {\n      const numericCollectorNumber = collectorNumber.match(/\\d+/)[0];\n      let queryNum = `!\"${cardName}\" set:${setCode} number:${numericCollectorNumber}`;\n      let respNum = await axios.get(`https://api.scryfall.com/cards/search`, {\n        params: {\n          q: queryNum,\n          unique: 'prints',\n          order: 'released',\n          dir: 'desc'\n        }\n      });\n      let cardNum = getMostRecent(respNum.data.data);\n      if (cardNum) {\n        console.log(`[Scryfall fallback] Found by name+set+numeric number: ${cardName} (${setCode}) ${numericCollectorNumber}`);\n        const imageUrl = cardNum.image_uris?.large || cardNum.card_faces?.[0]?.image_uris?.large;\n        return {\n          name: cardNum.name,\n          imageUrl: imageUrl,\n          set: cardNum.set,\n          setCode: cardNum.set,\n          set_name: cardNum.set_name,\n          collectorNumber: cardNum.collector_number,\n          prints_search_uri: cardNum.prints_search_uri\n        };\n      }\n    }\n    // 3. Try name + set (ignore collector number)\n    if (setCode) {\n      let fallbackQuery = `!\"${cardName}\" set:${setCode}`;\n      let fallbackResp = await axios.get(`https://api.scryfall.com/cards/search`, {\n        params: {\n          q: fallbackQuery,\n          unique: 'prints',\n          order: 'released',\n          dir: 'desc'\n        }\n      });\n      let cardSet = getMostRecent(fallbackResp.data.data);\n      if (cardSet) {\n        console.log(`[Scryfall fallback] Found by name+set: ${cardName} (${setCode})`);\n        const imageUrl = cardSet.image_uris?.large || cardSet.card_faces?.[0]?.image_uris?.large;\n        return {\n          name: cardSet.name,\n          imageUrl: imageUrl,\n          set: cardSet.set,\n          setCode: cardSet.set,\n          set_name: cardSet.set_name,\n          collectorNumber: cardSet.collector_number,\n          prints_search_uri: cardSet.prints_search_uri\n        };\n      }\n    }\n    // 4. Try name only\n    let fallbackQuery2 = `!\"${cardName}\"`;\n    let fallbackResp2 = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: fallbackQuery2,\n        unique: 'prints',\n        order: 'released',\n        dir: 'desc'\n      }\n    });\n    let cardNameOnly = getMostRecent(fallbackResp2.data.data);\n    if (cardNameOnly) {\n      console.log(`[Scryfall fallback] Found by name only: ${cardName}`);\n      const imageUrl = cardNameOnly.image_uris?.large || cardNameOnly.card_faces?.[0]?.image_uris?.large;\n      return {\n        name: cardNameOnly.name,\n        imageUrl: imageUrl,\n        set: cardNameOnly.set,\n        setCode: cardNameOnly.set,\n        set_name: cardNameOnly.set_name,\n        collectorNumber: cardNameOnly.collector_number,\n        prints_search_uri: cardNameOnly.prints_search_uri\n      };\n    }\n    // Not found\n    console.log(`[Scryfall] Card not found after all fallbacks: ${cardName} (${setCode}) ${collectorNumber}`);\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    throw new Error(`Card not found: ${cardName}`);\n  }\n};\n\n// Fetch all printings for a card using prints_search_uri\nexport const fetchAllPrintings = async (prints_search_uri) => {\n  try {\n    const printings = [];\n    let nextPage = prints_search_uri;\n    while (nextPage) {\n      const response = await axios.get(nextPage);\n      if (response.data.data && response.data.data.length > 0) {\n        printings.push(...response.data.data);\n      }\n      nextPage = response.data.has_more ? response.data.next_page : null;\n    }\n    // Sort by released_at descending (newest first)\n    printings.sort((a, b) => (b.released_at || '').localeCompare(a.released_at || ''));\n    return printings;\n  } catch (error) {\n    throw new Error('Failed to fetch printings');\n  }\n};\n\n// Fetch multiple cards with error handling and progress tracking\nexport const fetchMultipleCards = async (cards, onProgress = null) => {\n  const results = [];\n  const errors = [];\n  const invalidLineIndices = [];\n\n  for (let idx = 0; idx < cards.length; idx++) {\n    const card = cards[idx];\n    \n    // Update progress\n    if (onProgress) {\n      onProgress({\n        current: idx + 1,\n        total: cards.length,\n        message: `Loading ${card.name}...`\n      });\n    }\n    \n    try {\n      const cardData = await fetchCardData(card.name, card.setCode, card.collectorNumber);\n      const cardDataWithQuantity = { ...cardData, quantity: card.quantity };\n      results.push(cardDataWithQuantity);\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n      invalidLineIndices.push(idx);\n    }\n  }\n\n  return { results, errors, invalidLineIndices };\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,aAAa,GAAIC,YAAY,IAAK;EAC7C,MAAMC,KAAK,GAAGD,YAAY,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,IAAI,CAAC;EAC7C,MAAMC,KAAK,GAAG,EAAE;EAEhB,KAAK,MAAMC,IAAI,IAAIJ,KAAK,EAAE;IACxB,MAAMK,WAAW,GAAGD,IAAI,CAACH,IAAI,CAAC,CAAC;IAC/B,IAAI,CAACI,WAAW,EAAE;;IAElB;IACA,MAAMC,KAAK,GAAGD,WAAW,CAACC,KAAK,CAAC,uDAAuD,CAAC;IACxF,IAAIA,KAAK,EAAE;MACT,MAAM,GAAGC,QAAQ,EAAEC,QAAQ,EAAEC,OAAO,EAAEC,eAAe,CAAC,GAAGJ,KAAK;MAC9DH,KAAK,CAACQ,IAAI,CAAC;QACTJ,QAAQ,EAAEK,QAAQ,CAACL,QAAQ,CAAC;QAC5BM,IAAI,EAAEL,QAAQ,CAACP,IAAI,CAAC,CAAC;QACrBQ,OAAO,EAAEA,OAAO,GAAGA,OAAO,CAACR,IAAI,CAAC,CAAC,GAAG,IAAI;QACxCS,eAAe,EAAEA,eAAe,GAAGA,eAAe,CAACT,IAAI,CAAC,CAAC,GAAG;MAC9D,CAAC,CAAC;MACF;IACF;IACA;IACA,MAAMa,QAAQ,GAAGT,WAAW,CAACC,KAAK,CAAC,yBAAyB,CAAC;IAC7D,IAAIQ,QAAQ,EAAE;MACZX,KAAK,CAACQ,IAAI,CAAC;QACTJ,QAAQ,EAAE,CAAC;QACXM,IAAI,EAAEC,QAAQ,CAAC,CAAC,CAAC,CAACb,IAAI,CAAC,CAAC;QACxBQ,OAAO,EAAE,IAAI;QACbC,eAAe,EAAE;MACnB,CAAC,CAAC;IACJ;EACF;EACAK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEb,KAAK,CAAC;EACtC,OAAOA,KAAK;AACd,CAAC;;AAED;AACA,OAAO,MAAMc,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACFF,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;IAEtC;IACA,MAAME,SAAS,GAAG,MAAMrB,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;MACzEC,MAAM,EAAE;QAAEC,CAAC,EAAE,mBAAmB;QAAEC,MAAM,EAAE;MAAQ;IACpD,CAAC,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEE,SAAS,CAACK,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE,SAAS,CAAC;;IAE9E;IACA,MAAMC,SAAS,GAAG,MAAM5B,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;MACzEC,MAAM,EAAE;QAAEC,CAAC,EAAE,2BAA2B;QAAEC,MAAM,EAAE;MAAQ;IAC5D,CAAC,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAES,SAAS,CAACF,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE,SAAS,CAAC;;IAElF;IACA,MAAME,SAAS,GAAG,MAAM7B,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;MACzEC,MAAM,EAAE;QAAEC,CAAC,EAAE,iBAAiB;QAAEC,MAAM,EAAE;MAAQ;IAClD,CAAC,CAAC;IACFP,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEU,SAAS,CAACH,IAAI,CAACA,IAAI,CAACC,MAAM,EAAE,SAAS,CAAC;IAE5E,OAAO,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IAAA,IAAAC,eAAA,EAAAC,gBAAA;IACdd,OAAO,CAACY,KAAK,CAAC,kBAAkB,GAAAC,eAAA,GAAED,KAAK,CAACG,QAAQ,cAAAF,eAAA,uBAAdA,eAAA,CAAgBG,MAAM,GAAAF,gBAAA,GAAEF,KAAK,CAACG,QAAQ,cAAAD,gBAAA,uBAAdA,gBAAA,CAAgBG,UAAU,CAAC;IACrF,OAAO,KAAK;EACd;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAOzB,QAAQ,EAAEC,OAAO,GAAG,IAAI,EAAEC,eAAe,GAAG,IAAI,KAAK;EACvF;EACA,MAAMwB,aAAa,GAAIX,IAAI,IAAKA,IAAI,IAAIA,IAAI,CAACC,MAAM,GAAG,CAAC,GAAGD,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI;EACxE,IAAI;IACF;IACA,IAAIY,KAAK,GAAG,KAAK3B,QAAQ,GAAG;IAC5B,IAAIC,OAAO,IAAIC,eAAe,EAAE;MAC9ByB,KAAK,IAAI,QAAQ1B,OAAO,WAAWC,eAAe,EAAE;IACtD,CAAC,MAAM,IAAID,OAAO,EAAE;MAClB0B,KAAK,IAAI,QAAQ1B,OAAO,EAAE;IAC5B;IACA,IAAIqB,QAAQ,GAAG,MAAMjC,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;MACtEC,MAAM,EAAE;QACNC,CAAC,EAAEc,KAAK;QACRb,MAAM,EAAE,QAAQ;QAChBc,KAAK,EAAE,UAAU;QACjBC,GAAG,EAAE;MACP;IACF,CAAC,CAAC;IACF,IAAIC,IAAI,GAAGJ,aAAa,CAACJ,QAAQ,CAACP,IAAI,CAACA,IAAI,CAAC;IAC5C,IAAIe,IAAI,EAAE;MAAA,IAAAC,gBAAA,EAAAC,gBAAA,EAAAC,iBAAA,EAAAC,qBAAA;MACR3B,OAAO,CAACC,GAAG,CAAC,2CAA2CR,QAAQ,KAAKC,OAAO,KAAKC,eAAe,EAAE,CAAC;MAClG,MAAMiC,QAAQ,GAAG,EAAAJ,gBAAA,GAAAD,IAAI,CAACM,UAAU,cAAAL,gBAAA,uBAAfA,gBAAA,CAAiBM,KAAK,OAAAL,gBAAA,GAAIF,IAAI,CAACQ,UAAU,cAAAN,gBAAA,wBAAAC,iBAAA,GAAfD,gBAAA,CAAkB,CAAC,CAAC,cAAAC,iBAAA,wBAAAC,qBAAA,GAApBD,iBAAA,CAAsBG,UAAU,cAAAF,qBAAA,uBAAhCA,qBAAA,CAAkCG,KAAK;MAClF,OAAO;QACLhC,IAAI,EAAEyB,IAAI,CAACzB,IAAI;QACf8B,QAAQ,EAAEA,QAAQ;QAClBI,GAAG,EAAET,IAAI,CAACS,GAAG;QACbtC,OAAO,EAAE6B,IAAI,CAACS,GAAG;QACjBC,QAAQ,EAAEV,IAAI,CAACU,QAAQ;QACvBtC,eAAe,EAAE4B,IAAI,CAACW,gBAAgB;QACtCC,iBAAiB,EAAEZ,IAAI,CAACY;MAC1B,CAAC;IACH;IACA;IACA,IAAIzC,OAAO,IAAIC,eAAe,IAAI,cAAc,CAACyC,IAAI,CAACzC,eAAe,CAAC,EAAE;MACtE,MAAM0C,sBAAsB,GAAG1C,eAAe,CAACJ,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;MAC9D,IAAI+C,QAAQ,GAAG,KAAK7C,QAAQ,SAASC,OAAO,WAAW2C,sBAAsB,EAAE;MAC/E,IAAIE,OAAO,GAAG,MAAMzD,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;QACrEC,MAAM,EAAE;UACNC,CAAC,EAAEgC,QAAQ;UACX/B,MAAM,EAAE,QAAQ;UAChBc,KAAK,EAAE,UAAU;UACjBC,GAAG,EAAE;QACP;MACF,CAAC,CAAC;MACF,IAAIkB,OAAO,GAAGrB,aAAa,CAACoB,OAAO,CAAC/B,IAAI,CAACA,IAAI,CAAC;MAC9C,IAAIgC,OAAO,EAAE;QAAA,IAAAC,mBAAA,EAAAC,mBAAA,EAAAC,oBAAA,EAAAC,qBAAA;QACX5C,OAAO,CAACC,GAAG,CAAC,yDAAyDR,QAAQ,KAAKC,OAAO,KAAK2C,sBAAsB,EAAE,CAAC;QACvH,MAAMT,QAAQ,GAAG,EAAAa,mBAAA,GAAAD,OAAO,CAACX,UAAU,cAAAY,mBAAA,uBAAlBA,mBAAA,CAAoBX,KAAK,OAAAY,mBAAA,GAAIF,OAAO,CAACT,UAAU,cAAAW,mBAAA,wBAAAC,oBAAA,GAAlBD,mBAAA,CAAqB,CAAC,CAAC,cAAAC,oBAAA,wBAAAC,qBAAA,GAAvBD,oBAAA,CAAyBd,UAAU,cAAAe,qBAAA,uBAAnCA,qBAAA,CAAqCd,KAAK;QACxF,OAAO;UACLhC,IAAI,EAAE0C,OAAO,CAAC1C,IAAI;UAClB8B,QAAQ,EAAEA,QAAQ;UAClBI,GAAG,EAAEQ,OAAO,CAACR,GAAG;UAChBtC,OAAO,EAAE8C,OAAO,CAACR,GAAG;UACpBC,QAAQ,EAAEO,OAAO,CAACP,QAAQ;UAC1BtC,eAAe,EAAE6C,OAAO,CAACN,gBAAgB;UACzCC,iBAAiB,EAAEK,OAAO,CAACL;QAC7B,CAAC;MACH;IACF;IACA;IACA,IAAIzC,OAAO,EAAE;MACX,IAAImD,aAAa,GAAG,KAAKpD,QAAQ,SAASC,OAAO,EAAE;MACnD,IAAIoD,YAAY,GAAG,MAAMhE,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;QAC1EC,MAAM,EAAE;UACNC,CAAC,EAAEuC,aAAa;UAChBtC,MAAM,EAAE,QAAQ;UAChBc,KAAK,EAAE,UAAU;UACjBC,GAAG,EAAE;QACP;MACF,CAAC,CAAC;MACF,IAAIyB,OAAO,GAAG5B,aAAa,CAAC2B,YAAY,CAACtC,IAAI,CAACA,IAAI,CAAC;MACnD,IAAIuC,OAAO,EAAE;QAAA,IAAAC,mBAAA,EAAAC,mBAAA,EAAAC,oBAAA,EAAAC,qBAAA;QACXnD,OAAO,CAACC,GAAG,CAAC,0CAA0CR,QAAQ,KAAKC,OAAO,GAAG,CAAC;QAC9E,MAAMkC,QAAQ,GAAG,EAAAoB,mBAAA,GAAAD,OAAO,CAAClB,UAAU,cAAAmB,mBAAA,uBAAlBA,mBAAA,CAAoBlB,KAAK,OAAAmB,mBAAA,GAAIF,OAAO,CAAChB,UAAU,cAAAkB,mBAAA,wBAAAC,oBAAA,GAAlBD,mBAAA,CAAqB,CAAC,CAAC,cAAAC,oBAAA,wBAAAC,qBAAA,GAAvBD,oBAAA,CAAyBrB,UAAU,cAAAsB,qBAAA,uBAAnCA,qBAAA,CAAqCrB,KAAK;QACxF,OAAO;UACLhC,IAAI,EAAEiD,OAAO,CAACjD,IAAI;UAClB8B,QAAQ,EAAEA,QAAQ;UAClBI,GAAG,EAAEe,OAAO,CAACf,GAAG;UAChBtC,OAAO,EAAEqD,OAAO,CAACf,GAAG;UACpBC,QAAQ,EAAEc,OAAO,CAACd,QAAQ;UAC1BtC,eAAe,EAAEoD,OAAO,CAACb,gBAAgB;UACzCC,iBAAiB,EAAEY,OAAO,CAACZ;QAC7B,CAAC;MACH;IACF;IACA;IACA,IAAIiB,cAAc,GAAG,KAAK3D,QAAQ,GAAG;IACrC,IAAI4D,aAAa,GAAG,MAAMvE,KAAK,CAACsB,GAAG,CAAC,uCAAuC,EAAE;MAC3EC,MAAM,EAAE;QACNC,CAAC,EAAE8C,cAAc;QACjB7C,MAAM,EAAE,QAAQ;QAChBc,KAAK,EAAE,UAAU;QACjBC,GAAG,EAAE;MACP;IACF,CAAC,CAAC;IACF,IAAIgC,YAAY,GAAGnC,aAAa,CAACkC,aAAa,CAAC7C,IAAI,CAACA,IAAI,CAAC;IACzD,IAAI8C,YAAY,EAAE;MAAA,IAAAC,qBAAA,EAAAC,qBAAA,EAAAC,sBAAA,EAAAC,sBAAA;MAChB1D,OAAO,CAACC,GAAG,CAAC,2CAA2CR,QAAQ,EAAE,CAAC;MAClE,MAAMmC,QAAQ,GAAG,EAAA2B,qBAAA,GAAAD,YAAY,CAACzB,UAAU,cAAA0B,qBAAA,uBAAvBA,qBAAA,CAAyBzB,KAAK,OAAA0B,qBAAA,GAAIF,YAAY,CAACvB,UAAU,cAAAyB,qBAAA,wBAAAC,sBAAA,GAAvBD,qBAAA,CAA0B,CAAC,CAAC,cAAAC,sBAAA,wBAAAC,sBAAA,GAA5BD,sBAAA,CAA8B5B,UAAU,cAAA6B,sBAAA,uBAAxCA,sBAAA,CAA0C5B,KAAK;MAClG,OAAO;QACLhC,IAAI,EAAEwD,YAAY,CAACxD,IAAI;QACvB8B,QAAQ,EAAEA,QAAQ;QAClBI,GAAG,EAAEsB,YAAY,CAACtB,GAAG;QACrBtC,OAAO,EAAE4D,YAAY,CAACtB,GAAG;QACzBC,QAAQ,EAAEqB,YAAY,CAACrB,QAAQ;QAC/BtC,eAAe,EAAE2D,YAAY,CAACpB,gBAAgB;QAC9CC,iBAAiB,EAAEmB,YAAY,CAACnB;MAClC,CAAC;IACH;IACA;IACAnC,OAAO,CAACC,GAAG,CAAC,kDAAkDR,QAAQ,KAAKC,OAAO,KAAKC,eAAe,EAAE,CAAC;IACzG,MAAM,IAAIgE,KAAK,CAAC,mBAAmBlE,QAAQ,EAAE,CAAC;EAChD,CAAC,CAAC,OAAOmB,KAAK,EAAE;IACd,MAAM,IAAI+C,KAAK,CAAC,mBAAmBlE,QAAQ,EAAE,CAAC;EAChD;AACF,CAAC;;AAED;AACA,OAAO,MAAMmE,iBAAiB,GAAG,MAAOzB,iBAAiB,IAAK;EAC5D,IAAI;IACF,MAAM0B,SAAS,GAAG,EAAE;IACpB,IAAIC,QAAQ,GAAG3B,iBAAiB;IAChC,OAAO2B,QAAQ,EAAE;MACf,MAAM/C,QAAQ,GAAG,MAAMjC,KAAK,CAACsB,GAAG,CAAC0D,QAAQ,CAAC;MAC1C,IAAI/C,QAAQ,CAACP,IAAI,CAACA,IAAI,IAAIO,QAAQ,CAACP,IAAI,CAACA,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACvDoD,SAAS,CAACjE,IAAI,CAAC,GAAGmB,QAAQ,CAACP,IAAI,CAACA,IAAI,CAAC;MACvC;MACAsD,QAAQ,GAAG/C,QAAQ,CAACP,IAAI,CAACuD,QAAQ,GAAGhD,QAAQ,CAACP,IAAI,CAACwD,SAAS,GAAG,IAAI;IACpE;IACA;IACAH,SAAS,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,CAACA,CAAC,CAACC,WAAW,IAAI,EAAE,EAAEC,aAAa,CAACH,CAAC,CAACE,WAAW,IAAI,EAAE,CAAC,CAAC;IAClF,OAAOP,SAAS;EAClB,CAAC,CAAC,OAAOjD,KAAK,EAAE;IACd,MAAM,IAAI+C,KAAK,CAAC,2BAA2B,CAAC;EAC9C;AACF,CAAC;;AAED;AACA,OAAO,MAAMW,kBAAkB,GAAG,MAAAA,CAAOlF,KAAK,EAAEmF,UAAU,GAAG,IAAI,KAAK;EACpE,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,MAAM,GAAG,EAAE;EACjB,MAAMC,kBAAkB,GAAG,EAAE;EAE7B,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGvF,KAAK,CAACqB,MAAM,EAAEkE,GAAG,EAAE,EAAE;IAC3C,MAAMpD,IAAI,GAAGnC,KAAK,CAACuF,GAAG,CAAC;;IAEvB;IACA,IAAIJ,UAAU,EAAE;MACdA,UAAU,CAAC;QACTK,OAAO,EAAED,GAAG,GAAG,CAAC;QAChBE,KAAK,EAAEzF,KAAK,CAACqB,MAAM;QACnBqE,OAAO,EAAE,WAAWvD,IAAI,CAACzB,IAAI;MAC/B,CAAC,CAAC;IACJ;IAEA,IAAI;MACF,MAAMiF,QAAQ,GAAG,MAAM7D,aAAa,CAACK,IAAI,CAACzB,IAAI,EAAEyB,IAAI,CAAC7B,OAAO,EAAE6B,IAAI,CAAC5B,eAAe,CAAC;MACnF,MAAMqF,oBAAoB,GAAG;QAAE,GAAGD,QAAQ;QAAEvF,QAAQ,EAAE+B,IAAI,CAAC/B;MAAS,CAAC;MACrEgF,OAAO,CAAC5E,IAAI,CAACoF,oBAAoB,CAAC;IACpC,CAAC,CAAC,OAAOpE,KAAK,EAAE;MACd6D,MAAM,CAAC7E,IAAI,CAAC,GAAG2B,IAAI,CAACzB,IAAI,KAAKc,KAAK,CAACkE,OAAO,EAAE,CAAC;MAC7CJ,kBAAkB,CAAC9E,IAAI,CAAC+E,GAAG,CAAC;IAC9B;EACF;EAEA,OAAO;IAAEH,OAAO;IAAEC,MAAM;IAAEC;EAAmB,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}