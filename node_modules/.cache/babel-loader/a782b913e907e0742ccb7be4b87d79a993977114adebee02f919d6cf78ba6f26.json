{"ast":null,"code":"import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = decklistText => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+(\\d+))?$/);\n    if (match) {\n      const [, quantity, cardName, setCode, collectorNumber] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null,\n        collectorNumber: collectorNumber ? collectorNumber.trim() : null\n      });\n      continue;\n    }\n    // Match lines with only a card name\n    const nameOnly = trimmedLine.match(/^([A-Za-z0-9',:!\\- ]+)$/);\n    if (nameOnly) {\n      cards.push({\n        quantity: 1,\n        name: nameOnly[1].trim(),\n        setCode: null,\n        collectorNumber: null\n      });\n    }\n  }\n  return cards;\n};\n\n// Test function to verify API is working\nexport const testScryfallAPI = async () => {\n  try {\n    console.log('Testing Scryfall API...');\n\n    // Test 1: Simple card search\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\n\n    // Test 2: Set-specific search\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Lightning Bolt\" set:M11',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\n\n    // Test 3: Counterspell search\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: {\n        q: '!\"Counterspell\"',\n        unique: 'cards'\n      }\n    });\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\n    return true;\n  } catch (error) {\n    var _error$response, _error$response2;\n    console.error('API test failed:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status, (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.statusText);\n    return false;\n  }\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null, collectorNumber = null) => {\n  try {\n    let query = `!\"${cardName}\"`;\n    if (setCode && collectorNumber) {\n      query += ` set:${setCode} number:${collectorNumber}`;\n    } else if (setCode) {\n      query += ` set:${setCode}`;\n    }\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: query,\n        unique: 'prints',\n        order: 'released',\n        dir: 'desc'\n      }\n    });\n    if (response.data.data && response.data.data.length > 0) {\n      var _card$image_uris, _card$card_faces, _card$card_faces$, _card$card_faces$$ima;\n      const card = response.data.data[0];\n      const imageUrl = ((_card$image_uris = card.image_uris) === null || _card$image_uris === void 0 ? void 0 : _card$image_uris.large) || ((_card$card_faces = card.card_faces) === null || _card$card_faces === void 0 ? void 0 : (_card$card_faces$ = _card$card_faces[0]) === null || _card$card_faces$ === void 0 ? void 0 : (_card$card_faces$$ima = _card$card_faces$.image_uris) === null || _card$card_faces$$ima === void 0 ? void 0 : _card$card_faces$$ima.large);\n      return {\n        name: card.name,\n        imageUrl: imageUrl,\n        set: card.set,\n        setCode: card.set,\n        set_name: card.set_name,\n        collectorNumber: card.collector_number,\n        prints_search_uri: card.prints_search_uri\n      };\n    }\n    // If not found, try fallback strategies\n    // 1. Try name + set only\n    if (setCode) {\n      try {\n        let fallbackQuery = `!\"${cardName}\" set:${setCode}`;\n        const fallbackResp = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: fallbackQuery,\n            unique: 'prints',\n            order: 'released',\n            dir: 'desc'\n          }\n        });\n        if (fallbackResp.data.data && fallbackResp.data.data.length > 0) {\n          var _card$image_uris2, _card$card_faces2, _card$card_faces2$, _card$card_faces2$$im;\n          const card = fallbackResp.data.data[0];\n          const imageUrl = ((_card$image_uris2 = card.image_uris) === null || _card$image_uris2 === void 0 ? void 0 : _card$image_uris2.large) || ((_card$card_faces2 = card.card_faces) === null || _card$card_faces2 === void 0 ? void 0 : (_card$card_faces2$ = _card$card_faces2[0]) === null || _card$card_faces2$ === void 0 ? void 0 : (_card$card_faces2$$im = _card$card_faces2$.image_uris) === null || _card$card_faces2$$im === void 0 ? void 0 : _card$card_faces2$$im.large);\n          console.log(`[Scryfall fallback] Found by name+set: ${cardName} (${setCode})`);\n          return {\n            name: card.name,\n            imageUrl: imageUrl,\n            set: card.set,\n            setCode: card.set,\n            set_name: card.set_name,\n            collectorNumber: card.collector_number,\n            prints_search_uri: card.prints_search_uri\n          };\n        }\n      } catch (e) {/* ignore */}\n    }\n    // 2. Try name only\n    try {\n      let fallbackQuery2 = `!\"${cardName}\"`;\n      const fallbackResp2 = await axios.get(`https://api.scryfall.com/cards/search`, {\n        params: {\n          q: fallbackQuery2,\n          unique: 'prints',\n          order: 'released',\n          dir: 'desc'\n        }\n      });\n      if (fallbackResp2.data.data && fallbackResp2.data.data.length > 0) {\n        var _card$image_uris3, _card$card_faces3, _card$card_faces3$, _card$card_faces3$$im;\n        const card = fallbackResp2.data.data[0];\n        const imageUrl = ((_card$image_uris3 = card.image_uris) === null || _card$image_uris3 === void 0 ? void 0 : _card$image_uris3.large) || ((_card$card_faces3 = card.card_faces) === null || _card$card_faces3 === void 0 ? void 0 : (_card$card_faces3$ = _card$card_faces3[0]) === null || _card$card_faces3$ === void 0 ? void 0 : (_card$card_faces3$$im = _card$card_faces3$.image_uris) === null || _card$card_faces3$$im === void 0 ? void 0 : _card$card_faces3$$im.large);\n        console.log(`[Scryfall fallback] Found by name only: ${cardName}`);\n        return {\n          name: card.name,\n          imageUrl: imageUrl,\n          set: card.set,\n          setCode: card.set,\n          set_name: card.set_name,\n          collectorNumber: card.collector_number,\n          prints_search_uri: card.prints_search_uri\n        };\n      }\n    } catch (e) {/* ignore */}\n    // 3. Try stripping letter from collector number if present\n    if (setCode && collectorNumber && /\\d+[a-zA-Z]$/.test(collectorNumber)) {\n      const numericCollectorNumber = collectorNumber.match(/\\d+/)[0];\n      // Try strict: name + set + numeric collector number\n      try {\n        let queryNum = `!\"${cardName}\" set:${setCode} number:${numericCollectorNumber}`;\n        const respNum = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: queryNum,\n            unique: 'prints',\n            order: 'released',\n            dir: 'desc'\n          }\n        });\n        if (respNum.data.data && respNum.data.data.length > 0) {\n          var _card$image_uris4, _card$card_faces4, _card$card_faces4$, _card$card_faces4$$im;\n          const card = respNum.data.data[0];\n          const imageUrl = ((_card$image_uris4 = card.image_uris) === null || _card$image_uris4 === void 0 ? void 0 : _card$image_uris4.large) || ((_card$card_faces4 = card.card_faces) === null || _card$card_faces4 === void 0 ? void 0 : (_card$card_faces4$ = _card$card_faces4[0]) === null || _card$card_faces4$ === void 0 ? void 0 : (_card$card_faces4$$im = _card$card_faces4$.image_uris) === null || _card$card_faces4$$im === void 0 ? void 0 : _card$card_faces4$$im.large);\n          console.log(`[Scryfall fallback] Found by name+set+numeric number: ${cardName} (${setCode}) ${numericCollectorNumber}`);\n          return {\n            name: card.name,\n            imageUrl: imageUrl,\n            set: card.set,\n            setCode: card.set,\n            set_name: card.set_name,\n            collectorNumber: card.collector_number,\n            prints_search_uri: card.prints_search_uri\n          };\n        }\n      } catch (e) {/* ignore */}\n      // Try fallback: name + set only\n      try {\n        let fallbackQueryNum = `!\"${cardName}\" set:${setCode}`;\n        const fallbackRespNum = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: fallbackQueryNum,\n            unique: 'prints',\n            order: 'released',\n            dir: 'desc'\n          }\n        });\n        if (fallbackRespNum.data.data && fallbackRespNum.data.data.length > 0) {\n          var _card$image_uris5, _card$card_faces5, _card$card_faces5$, _card$card_faces5$$im;\n          const card = fallbackRespNum.data.data[0];\n          const imageUrl = ((_card$image_uris5 = card.image_uris) === null || _card$image_uris5 === void 0 ? void 0 : _card$image_uris5.large) || ((_card$card_faces5 = card.card_faces) === null || _card$card_faces5 === void 0 ? void 0 : (_card$card_faces5$ = _card$card_faces5[0]) === null || _card$card_faces5$ === void 0 ? void 0 : (_card$card_faces5$$im = _card$card_faces5$.image_uris) === null || _card$card_faces5$$im === void 0 ? void 0 : _card$card_faces5$$im.large);\n          console.log(`[Scryfall fallback] Found by name+set (after stripping number letter): ${cardName} (${setCode})`);\n          return {\n            name: card.name,\n            imageUrl: imageUrl,\n            set: card.set,\n            setCode: card.set,\n            set_name: card.set_name,\n            collectorNumber: card.collector_number,\n            prints_search_uri: card.prints_search_uri\n          };\n        }\n      } catch (e) {/* ignore */}\n    }\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    throw new Error(`Card not found: ${cardName}`);\n  }\n};\n\n// Fetch all printings for a card using prints_search_uri\nexport const fetchAllPrintings = async prints_search_uri => {\n  try {\n    const printings = [];\n    let nextPage = prints_search_uri;\n    while (nextPage) {\n      const response = await axios.get(nextPage);\n      if (response.data.data && response.data.data.length > 0) {\n        printings.push(...response.data.data);\n      }\n      nextPage = response.data.has_more ? response.data.next_page : null;\n    }\n    // Sort by released_at descending (newest first)\n    printings.sort((a, b) => (b.released_at || '').localeCompare(a.released_at || ''));\n    return printings;\n  } catch (error) {\n    throw new Error('Failed to fetch printings');\n  }\n};\n\n// Fetch multiple cards with error handling and progress tracking\nexport const fetchMultipleCards = async (cards, onProgress = null) => {\n  const results = [];\n  const errors = [];\n  const invalidLineIndices = [];\n  for (let idx = 0; idx < cards.length; idx++) {\n    const card = cards[idx];\n\n    // Update progress\n    if (onProgress) {\n      onProgress({\n        current: idx + 1,\n        total: cards.length,\n        message: `Loading ${card.name}...`\n      });\n    }\n    try {\n      const cardData = await fetchCardData(card.name, card.setCode, card.collectorNumber);\n      const cardDataWithQuantity = {\n        ...cardData,\n        quantity: card.quantity\n      };\n      results.push(cardDataWithQuantity);\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n      invalidLineIndices.push(idx);\n    }\n  }\n  return {\n    results,\n    errors,\n    invalidLineIndices\n  };\n};","map":{"version":3,"names":["axios","parseDecklist","decklistText","lines","trim","split","cards","line","trimmedLine","match","quantity","cardName","setCode","collectorNumber","push","parseInt","name","nameOnly","testScryfallAPI","console","log","response1","get","params","q","unique","data","length","response2","response3","error","_error$response","_error$response2","response","status","statusText","fetchCardData","query","order","dir","_card$image_uris","_card$card_faces","_card$card_faces$","_card$card_faces$$ima","card","imageUrl","image_uris","large","card_faces","set","set_name","collector_number","prints_search_uri","fallbackQuery","fallbackResp","_card$image_uris2","_card$card_faces2","_card$card_faces2$","_card$card_faces2$$im","e","fallbackQuery2","fallbackResp2","_card$image_uris3","_card$card_faces3","_card$card_faces3$","_card$card_faces3$$im","test","numericCollectorNumber","queryNum","respNum","_card$image_uris4","_card$card_faces4","_card$card_faces4$","_card$card_faces4$$im","fallbackQueryNum","fallbackRespNum","_card$image_uris5","_card$card_faces5","_card$card_faces5$","_card$card_faces5$$im","Error","fetchAllPrintings","printings","nextPage","has_more","next_page","sort","a","b","released_at","localeCompare","fetchMultipleCards","onProgress","results","errors","invalidLineIndices","idx","current","total","message","cardData","cardDataWithQuantity"],"sources":["C:/MTG/mtg-pdf-printer/src/utils/scryfall.js"],"sourcesContent":["import axios from 'axios';\n\n// Parse decklist text into card objects\nexport const parseDecklist = (decklistText) => {\n  const lines = decklistText.trim().split('\\n');\n  const cards = [];\n\n  for (const line of lines) {\n    const trimmedLine = line.trim();\n    if (!trimmedLine) continue;\n\n    // Match patterns like \"1x Lightning Bolt (2XM) 123\" or \"1 Lightning Bolt\"\n    const match = trimmedLine.match(/^(\\d+)(?:x\\s*)?(.+?)(?:\\s*\\(([^)]+)\\))?(?:\\s+(\\d+))?$/);\n    if (match) {\n      const [, quantity, cardName, setCode, collectorNumber] = match;\n      cards.push({\n        quantity: parseInt(quantity),\n        name: cardName.trim(),\n        setCode: setCode ? setCode.trim() : null,\n        collectorNumber: collectorNumber ? collectorNumber.trim() : null\n      });\n      continue;\n    }\n    // Match lines with only a card name\n    const nameOnly = trimmedLine.match(/^([A-Za-z0-9',:!\\- ]+)$/);\n    if (nameOnly) {\n      cards.push({\n        quantity: 1,\n        name: nameOnly[1].trim(),\n        setCode: null,\n        collectorNumber: null\n      });\n    }\n  }\n  return cards;\n};\n\n// Test function to verify API is working\nexport const testScryfallAPI = async () => {\n  try {\n    console.log('Testing Scryfall API...');\n    \n    // Test 1: Simple card search\n    const response1 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: { q: '!\"Lightning Bolt\"', unique: 'cards' }\n    });\n    console.log('Test 1 (Lightning Bolt):', response1.data.data.length, 'results');\n    \n    // Test 2: Set-specific search\n    const response2 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: { q: '!\"Lightning Bolt\" set:M11', unique: 'cards' }\n    });\n    console.log('Test 2 (Lightning Bolt M11):', response2.data.data.length, 'results');\n    \n    // Test 3: Counterspell search\n    const response3 = await axios.get('https://api.scryfall.com/cards/search', {\n      params: { q: '!\"Counterspell\"', unique: 'cards' }\n    });\n    console.log('Test 3 (Counterspell):', response3.data.data.length, 'results');\n    \n    return true;\n  } catch (error) {\n    console.error('API test failed:', error.response?.status, error.response?.statusText);\n    return false;\n  }\n};\n\n// Fetch card data from Scryfall API\nexport const fetchCardData = async (cardName, setCode = null, collectorNumber = null) => {\n  try {\n    let query = `!\"${cardName}\"`;\n    if (setCode && collectorNumber) {\n      query += ` set:${setCode} number:${collectorNumber}`;\n    } else if (setCode) {\n      query += ` set:${setCode}`;\n    }\n    const response = await axios.get(`https://api.scryfall.com/cards/search`, {\n      params: {\n        q: query,\n        unique: 'prints',\n        order: 'released',\n        dir: 'desc'\n      }\n    });\n    if (response.data.data && response.data.data.length > 0) {\n      const card = response.data.data[0];\n      const imageUrl = card.image_uris?.large || card.card_faces?.[0]?.image_uris?.large;\n      return {\n        name: card.name,\n        imageUrl: imageUrl,\n        set: card.set,\n        setCode: card.set,\n        set_name: card.set_name,\n        collectorNumber: card.collector_number,\n        prints_search_uri: card.prints_search_uri\n      };\n    }\n    // If not found, try fallback strategies\n    // 1. Try name + set only\n    if (setCode) {\n      try {\n        let fallbackQuery = `!\"${cardName}\" set:${setCode}`;\n        const fallbackResp = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: fallbackQuery,\n            unique: 'prints',\n            order: 'released',\n            dir: 'desc'\n          }\n        });\n        if (fallbackResp.data.data && fallbackResp.data.data.length > 0) {\n          const card = fallbackResp.data.data[0];\n          const imageUrl = card.image_uris?.large || card.card_faces?.[0]?.image_uris?.large;\n          console.log(`[Scryfall fallback] Found by name+set: ${cardName} (${setCode})`);\n          return {\n            name: card.name,\n            imageUrl: imageUrl,\n            set: card.set,\n            setCode: card.set,\n            set_name: card.set_name,\n            collectorNumber: card.collector_number,\n            prints_search_uri: card.prints_search_uri\n          };\n        }\n      } catch (e) { /* ignore */ }\n    }\n    // 2. Try name only\n    try {\n      let fallbackQuery2 = `!\"${cardName}\"`;\n      const fallbackResp2 = await axios.get(`https://api.scryfall.com/cards/search`, {\n        params: {\n          q: fallbackQuery2,\n          unique: 'prints',\n          order: 'released',\n          dir: 'desc'\n        }\n      });\n      if (fallbackResp2.data.data && fallbackResp2.data.data.length > 0) {\n        const card = fallbackResp2.data.data[0];\n        const imageUrl = card.image_uris?.large || card.card_faces?.[0]?.image_uris?.large;\n        console.log(`[Scryfall fallback] Found by name only: ${cardName}`);\n        return {\n          name: card.name,\n          imageUrl: imageUrl,\n          set: card.set,\n          setCode: card.set,\n          set_name: card.set_name,\n          collectorNumber: card.collector_number,\n          prints_search_uri: card.prints_search_uri\n        };\n      }\n    } catch (e) { /* ignore */ }\n    // 3. Try stripping letter from collector number if present\n    if (setCode && collectorNumber && /\\d+[a-zA-Z]$/.test(collectorNumber)) {\n      const numericCollectorNumber = collectorNumber.match(/\\d+/)[0];\n      // Try strict: name + set + numeric collector number\n      try {\n        let queryNum = `!\"${cardName}\" set:${setCode} number:${numericCollectorNumber}`;\n        const respNum = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: queryNum,\n            unique: 'prints',\n            order: 'released',\n            dir: 'desc'\n          }\n        });\n        if (respNum.data.data && respNum.data.data.length > 0) {\n          const card = respNum.data.data[0];\n          const imageUrl = card.image_uris?.large || card.card_faces?.[0]?.image_uris?.large;\n          console.log(`[Scryfall fallback] Found by name+set+numeric number: ${cardName} (${setCode}) ${numericCollectorNumber}`);\n          return {\n            name: card.name,\n            imageUrl: imageUrl,\n            set: card.set,\n            setCode: card.set,\n            set_name: card.set_name,\n            collectorNumber: card.collector_number,\n            prints_search_uri: card.prints_search_uri\n          };\n        }\n      } catch (e) { /* ignore */ }\n      // Try fallback: name + set only\n      try {\n        let fallbackQueryNum = `!\"${cardName}\" set:${setCode}`;\n        const fallbackRespNum = await axios.get(`https://api.scryfall.com/cards/search`, {\n          params: {\n            q: fallbackQueryNum,\n            unique: 'prints',\n            order: 'released',\n            dir: 'desc'\n          }\n        });\n        if (fallbackRespNum.data.data && fallbackRespNum.data.data.length > 0) {\n          const card = fallbackRespNum.data.data[0];\n          const imageUrl = card.image_uris?.large || card.card_faces?.[0]?.image_uris?.large;\n          console.log(`[Scryfall fallback] Found by name+set (after stripping number letter): ${cardName} (${setCode})`);\n          return {\n            name: card.name,\n            imageUrl: imageUrl,\n            set: card.set,\n            setCode: card.set,\n            set_name: card.set_name,\n            collectorNumber: card.collector_number,\n            prints_search_uri: card.prints_search_uri\n          };\n        }\n      } catch (e) { /* ignore */ }\n    }\n    throw new Error(`Card not found: ${cardName}`);\n  } catch (error) {\n    throw new Error(`Card not found: ${cardName}`);\n  }\n};\n\n// Fetch all printings for a card using prints_search_uri\nexport const fetchAllPrintings = async (prints_search_uri) => {\n  try {\n    const printings = [];\n    let nextPage = prints_search_uri;\n    while (nextPage) {\n      const response = await axios.get(nextPage);\n      if (response.data.data && response.data.data.length > 0) {\n        printings.push(...response.data.data);\n      }\n      nextPage = response.data.has_more ? response.data.next_page : null;\n    }\n    // Sort by released_at descending (newest first)\n    printings.sort((a, b) => (b.released_at || '').localeCompare(a.released_at || ''));\n    return printings;\n  } catch (error) {\n    throw new Error('Failed to fetch printings');\n  }\n};\n\n// Fetch multiple cards with error handling and progress tracking\nexport const fetchMultipleCards = async (cards, onProgress = null) => {\n  const results = [];\n  const errors = [];\n  const invalidLineIndices = [];\n\n  for (let idx = 0; idx < cards.length; idx++) {\n    const card = cards[idx];\n    \n    // Update progress\n    if (onProgress) {\n      onProgress({\n        current: idx + 1,\n        total: cards.length,\n        message: `Loading ${card.name}...`\n      });\n    }\n    \n    try {\n      const cardData = await fetchCardData(card.name, card.setCode, card.collectorNumber);\n      const cardDataWithQuantity = { ...cardData, quantity: card.quantity };\n      results.push(cardDataWithQuantity);\n    } catch (error) {\n      errors.push(`${card.name}: ${error.message}`);\n      invalidLineIndices.push(idx);\n    }\n  }\n\n  return { results, errors, invalidLineIndices };\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}